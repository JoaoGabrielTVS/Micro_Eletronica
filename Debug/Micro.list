
Micro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002744  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080028cc  080028cc  000038cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800299c  0800299c  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800299c  0800299c  0000399c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080029a4  080029a4  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029a4  080029a4  000039a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080029a8  080029a8  000039a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080029ac  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004068  2**0
                  CONTENTS
 10 .bss          00000170  20000068  20000068  00004068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d8  200001d8  00004068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 13 .debug_info   000058c4  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001311  00000000  00000000  0000995c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000700  00000000  00000000  0000ac70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000524  00000000  00000000  0000b370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000208cf  00000000  00000000  0000b894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000069e6  00000000  00000000  0002c163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2573  00000000  00000000  00032b49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f50bc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002108  00000000  00000000  000f5100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  000f7208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080028b4 	.word	0x080028b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	080028b4 	.word	0x080028b4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	f003 0307 	and.w	r3, r3, #7
 8000502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000504:	4b0c      	ldr	r3, [pc, #48]	@ (8000538 <__NVIC_SetPriorityGrouping+0x44>)
 8000506:	68db      	ldr	r3, [r3, #12]
 8000508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800050a:	68ba      	ldr	r2, [r7, #8]
 800050c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000510:	4013      	ands	r3, r2
 8000512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800051c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000520:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000526:	4a04      	ldr	r2, [pc, #16]	@ (8000538 <__NVIC_SetPriorityGrouping+0x44>)
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	60d3      	str	r3, [r2, #12]
}
 800052c:	bf00      	nop
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	e000ed00 	.word	0xe000ed00

0800053c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054a:	2b00      	cmp	r3, #0
 800054c:	db0b      	blt.n	8000566 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	f003 021f 	and.w	r2, r3, #31
 8000554:	4907      	ldr	r1, [pc, #28]	@ (8000574 <__NVIC_EnableIRQ+0x38>)
 8000556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055a:	095b      	lsrs	r3, r3, #5
 800055c:	2001      	movs	r0, #1
 800055e:	fa00 f202 	lsl.w	r2, r0, r2
 8000562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000566:	bf00      	nop
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	e000e100 	.word	0xe000e100

08000578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	6039      	str	r1, [r7, #0]
 8000582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000588:	2b00      	cmp	r3, #0
 800058a:	db0a      	blt.n	80005a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	b2da      	uxtb	r2, r3
 8000590:	490c      	ldr	r1, [pc, #48]	@ (80005c4 <__NVIC_SetPriority+0x4c>)
 8000592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000596:	0112      	lsls	r2, r2, #4
 8000598:	b2d2      	uxtb	r2, r2
 800059a:	440b      	add	r3, r1
 800059c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005a0:	e00a      	b.n	80005b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	4908      	ldr	r1, [pc, #32]	@ (80005c8 <__NVIC_SetPriority+0x50>)
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	f003 030f 	and.w	r3, r3, #15
 80005ae:	3b04      	subs	r3, #4
 80005b0:	0112      	lsls	r2, r2, #4
 80005b2:	b2d2      	uxtb	r2, r2
 80005b4:	440b      	add	r3, r1
 80005b6:	761a      	strb	r2, [r3, #24]
}
 80005b8:	bf00      	nop
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	e000e100 	.word	0xe000e100
 80005c8:	e000ed00 	.word	0xe000ed00

080005cc <Utility_Init>:
//Declarações de funções úteis

//Funções de configuração do sistema de clock do STM32
//Inicialização de funções da biblioteca
void Utility_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	Configure_Clock();	//inicializa o sistema de clock
 80005d0:	f000 f804 	bl	80005dc <Configure_Clock>
	TIM2_Setup();		//configura o Timer2 como base de tempo de 1us
 80005d4:	f000 f86c 	bl	80006b0 <TIM2_Setup>
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}

080005dc <Configure_Clock>:
//HCLK = 168 MHz
//APB1 = 42 MHz
//APB2 = 84 MHz
//USB, RNG, SDIO = 48 MHz
void Configure_Clock(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
	#define PLL_N	168
	#define PLL_P	2
	#define PLL_Q	7

	//Configurações da Flash e do regulador de tensão para permitir operação em alta velocidade
	FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;	//habilita prefetch, caches e a latência da flash
 80005e0:	4b2e      	ldr	r3, [pc, #184]	@ (800069c <Configure_Clock+0xc0>)
 80005e2:	f240 7205 	movw	r2, #1797	@ 0x705
 80005e6:	601a      	str	r2, [r3, #0]
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;	//habilita o clock da interface de energia
 80005e8:	4b2d      	ldr	r3, [pc, #180]	@ (80006a0 <Configure_Clock+0xc4>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ec:	4a2c      	ldr	r2, [pc, #176]	@ (80006a0 <Configure_Clock+0xc4>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR->CR |= PWR_CR_VOS;				//regulador de tensão no modo 2
 80005f4:	4b2b      	ldr	r3, [pc, #172]	@ (80006a4 <Configure_Clock+0xc8>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a2a      	ldr	r2, [pc, #168]	@ (80006a4 <Configure_Clock+0xc8>)
 80005fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005fe:	6013      	str	r3, [r2, #0]

	//Configuração do modo de agrupamento de prioridades das interrupções
	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000600:	2003      	movs	r0, #3
 8000602:	f7ff ff77 	bl	80004f4 <__NVIC_SetPriorityGrouping>

	//Reseta os registradores do módulo RCC para o estado inicial
	RCC->CIR = 0;				//desabilita todas as interrupções de RCC
 8000606:	4b26      	ldr	r3, [pc, #152]	@ (80006a0 <Configure_Clock+0xc4>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
	RCC->CR |= RCC_CR_HSION;	//liga o oscilador HSI
 800060c:	4b24      	ldr	r3, [pc, #144]	@ (80006a0 <Configure_Clock+0xc4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a23      	ldr	r2, [pc, #140]	@ (80006a0 <Configure_Clock+0xc4>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]
	RCC->CFGR = 0;				//reseta o registrador CFGR
 8000618:	4b21      	ldr	r3, [pc, #132]	@ (80006a0 <Configure_Clock+0xc4>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
	//Desliga HSE, CSS e o PLL e o bypass de HSE
	RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLLON | RCC_CR_HSEBYP);
 800061e:	4b20      	ldr	r3, [pc, #128]	@ (80006a0 <Configure_Clock+0xc4>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a1f      	ldr	r2, [pc, #124]	@ (80006a0 <Configure_Clock+0xc4>)
 8000624:	f023 7386 	bic.w	r3, r3, #17563648	@ 0x10c0000
 8000628:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800062c:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR = 0x24003010;	//reseta o registrador PLLCFGR
 800062e:	4b1c      	ldr	r3, [pc, #112]	@ (80006a0 <Configure_Clock+0xc4>)
 8000630:	4a1d      	ldr	r2, [pc, #116]	@ (80006a8 <Configure_Clock+0xcc>)
 8000632:	605a      	str	r2, [r3, #4]

	//Configura a fonte de clock (HSE), os parâmetros do PLL e prescalers dos barramentos AHB, APB
	RCC->CR |= RCC_CR_HSEON;				//habilita HSE
 8000634:	4b1a      	ldr	r3, [pc, #104]	@ (80006a0 <Configure_Clock+0xc4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a19      	ldr	r2, [pc, #100]	@ (80006a0 <Configure_Clock+0xc4>)
 800063a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800063e:	6013      	str	r3, [r2, #0]
	while(!((RCC->CR) & RCC_CR_HSERDY));	//espera HSE ficar pronto
 8000640:	bf00      	nop
 8000642:	4b17      	ldr	r3, [pc, #92]	@ (80006a0 <Configure_Clock+0xc4>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800064a:	2b00      	cmp	r3, #0
 800064c:	d0f9      	beq.n	8000642 <Configure_Clock+0x66>
    RCC->CFGR |= 0x9400;	//HCLK = SYSCLK/1, PCLK2 = HCLK/2, PCLK1 = HCLK/4
 800064e:	4b14      	ldr	r3, [pc, #80]	@ (80006a0 <Configure_Clock+0xc4>)
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	4a13      	ldr	r2, [pc, #76]	@ (80006a0 <Configure_Clock+0xc4>)
 8000654:	f443 4314 	orr.w	r3, r3, #37888	@ 0x9400
 8000658:	6093      	str	r3, [r2, #8]

    //Configura a fonte de clock e os parâmetros do PLL principal
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (0x400000) | (PLL_Q << 24);
 800065a:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <Configure_Clock+0xc4>)
 800065c:	4a13      	ldr	r2, [pc, #76]	@ (80006ac <Configure_Clock+0xd0>)
 800065e:	605a      	str	r2, [r3, #4]

    RCC->CR |= RCC_CR_PLLON;			//habilita o PLL
 8000660:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <Configure_Clock+0xc4>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a0e      	ldr	r2, [pc, #56]	@ (80006a0 <Configure_Clock+0xc4>)
 8000666:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800066a:	6013      	str	r3, [r2, #0]
    while(!(RCC->CR & RCC_CR_PLLRDY));	//espera o PLL ficar pronto verificando a flag PLLRDY
 800066c:	bf00      	nop
 800066e:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <Configure_Clock+0xc4>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000676:	2b00      	cmp	r3, #0
 8000678:	d0f9      	beq.n	800066e <Configure_Clock+0x92>

    RCC->CFGR |= 0x2;					//seleciona o PLL como fonte de SYSCLK
 800067a:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <Configure_Clock+0xc4>)
 800067c:	689b      	ldr	r3, [r3, #8]
 800067e:	4a08      	ldr	r2, [pc, #32]	@ (80006a0 <Configure_Clock+0xc4>)
 8000680:	f043 0302 	orr.w	r3, r3, #2
 8000684:	6093      	str	r3, [r2, #8]
    while((RCC->CFGR & 0xC) != 0x8);	//espera o PLL ser a fonte de SYSCLK
 8000686:	bf00      	nop
 8000688:	4b05      	ldr	r3, [pc, #20]	@ (80006a0 <Configure_Clock+0xc4>)
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	f003 030c 	and.w	r3, r3, #12
 8000690:	2b08      	cmp	r3, #8
 8000692:	d1f9      	bne.n	8000688 <Configure_Clock+0xac>
}
 8000694:	bf00      	nop
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023c00 	.word	0x40023c00
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000
 80006a8:	24003010 	.word	0x24003010
 80006ac:	07402a04 	.word	0x07402a04

080006b0 <TIM2_Setup>:


//Funções de timers e temporização
//Configura o timer 2 como base de tempo de 1us
void TIM2_Setup(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
	//O modo padrão do contador é com contagem crescente
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;	//liga o clock do Timer2
 80006b4:	4b0d      	ldr	r3, [pc, #52]	@ (80006ec <TIM2_Setup+0x3c>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b8:	4a0c      	ldr	r2, [pc, #48]	@ (80006ec <TIM2_Setup+0x3c>)
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM2->PSC = 83;						//prescaler para incrementos a cada 1uS
 80006c0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006c4:	2253      	movs	r2, #83	@ 0x53
 80006c6:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->EGR = TIM_EGR_UG;				//update event para escrever o valor do prescaler
 80006c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006cc:	2201      	movs	r2, #1
 80006ce:	615a      	str	r2, [r3, #20]
	TIM2->CR1 |= TIM_CR1_CEN;			//habilita o timer
 80006d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006da:	f043 0301 	orr.w	r3, r3, #1
 80006de:	6013      	str	r3, [r2, #0]
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800

080006f0 <Delay_ms>:
	while(TIM2->CNT < delay);	//aguarda o tempo passar
}

//Criação de atraso em ms
void Delay_ms(uint32_t delay)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	uint32_t max = 1000*delay;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006fe:	fb02 f303 	mul.w	r3, r2, r3
 8000702:	60fb      	str	r3, [r7, #12]
	TIM2->CNT = 0;				//inicializa o contador com 0
 8000704:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000708:	2200      	movs	r2, #0
 800070a:	625a      	str	r2, [r3, #36]	@ 0x24
	while(TIM2->CNT < max);		//aguarda o tempo passar
 800070c:	bf00      	nop
 800070e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000714:	68fa      	ldr	r2, [r7, #12]
 8000716:	429a      	cmp	r2, r3
 8000718:	d8f9      	bhi.n	800070e <Delay_ms+0x1e>
}
 800071a:	bf00      	nop
 800071c:	bf00      	nop
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <GPIO_Clock_Enable>:


//Funções de manipulação de GPIO
//Habilita o clock de um GPIO
void GPIO_Clock_Enable(GPIO_TypeDef* GPIOx)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |= (1 << ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE)));
 8000730:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <GPIO_Clock_Enable+0x30>)
 8000732:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f103 433f 	add.w	r3, r3, #3204448256	@ 0xbf000000
 800073a:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 800073e:	0a9b      	lsrs	r3, r3, #10
 8000740:	2101      	movs	r1, #1
 8000742:	fa01 f303 	lsl.w	r3, r1, r3
 8000746:	4904      	ldr	r1, [pc, #16]	@ (8000758 <GPIO_Clock_Enable+0x30>)
 8000748:	4313      	orrs	r3, r2
 800074a:	630b      	str	r3, [r1, #48]	@ 0x30
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	40023800 	.word	0x40023800

0800075c <GPIO_Pin_Mode>:

//Configura o modo de operação de um pino de um GPIO
void GPIO_Pin_Mode(GPIO_TypeDef* GPIOx, uint8_t pin, uint8_t mode)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	70fb      	strb	r3, [r7, #3]
 8000768:	4613      	mov	r3, r2
 800076a:	70bb      	strb	r3, [r7, #2]
	GPIOx->MODER &= ~(0b11 << 2*pin);	//reseta os 2 bits do modo de operação
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	78fa      	ldrb	r2, [r7, #3]
 8000772:	0052      	lsls	r2, r2, #1
 8000774:	2103      	movs	r1, #3
 8000776:	fa01 f202 	lsl.w	r2, r1, r2
 800077a:	43d2      	mvns	r2, r2
 800077c:	401a      	ands	r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	601a      	str	r2, [r3, #0]
	GPIOx->MODER |= (mode << 2*pin);	//configura o modo selecionado
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	78b9      	ldrb	r1, [r7, #2]
 8000788:	78fa      	ldrb	r2, [r7, #3]
 800078a:	0052      	lsls	r2, r2, #1
 800078c:	fa01 f202 	lsl.w	r2, r1, r2
 8000790:	431a      	orrs	r2, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	601a      	str	r2, [r3, #0]
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <GPIO_Alternate_Function>:
	GPIOx->OTYPER |= (mode << pin);	//configura o tipo selecionado
}

//Configura a função alternativa de um pino de um GPIO
void GPIO_Alternate_Function(GPIO_TypeDef* GPIOx, uint8_t pin, uint8_t function)
{
 80007a2:	b480      	push	{r7}
 80007a4:	b083      	sub	sp, #12
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
 80007aa:	460b      	mov	r3, r1
 80007ac:	70fb      	strb	r3, [r7, #3]
 80007ae:	4613      	mov	r3, r2
 80007b0:	70bb      	strb	r3, [r7, #2]
	GPIOx->AFR[pin/8] &= ~(0b1111 << ((pin % 8) * 4));	//reseta os 4 bits da função alternativa
 80007b2:	78fb      	ldrb	r3, [r7, #3]
 80007b4:	08db      	lsrs	r3, r3, #3
 80007b6:	b2d8      	uxtb	r0, r3
 80007b8:	4602      	mov	r2, r0
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	3208      	adds	r2, #8
 80007be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007c2:	78fa      	ldrb	r2, [r7, #3]
 80007c4:	f002 0207 	and.w	r2, r2, #7
 80007c8:	0092      	lsls	r2, r2, #2
 80007ca:	210f      	movs	r1, #15
 80007cc:	fa01 f202 	lsl.w	r2, r1, r2
 80007d0:	43d2      	mvns	r2, r2
 80007d2:	4611      	mov	r1, r2
 80007d4:	4602      	mov	r2, r0
 80007d6:	4019      	ands	r1, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3208      	adds	r2, #8
 80007dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GPIOx->AFR[pin/8] |= (function << ((pin % 8) * 4));	//configura a função selecionada
 80007e0:	78fb      	ldrb	r3, [r7, #3]
 80007e2:	08db      	lsrs	r3, r3, #3
 80007e4:	b2d8      	uxtb	r0, r3
 80007e6:	4602      	mov	r2, r0
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3208      	adds	r2, #8
 80007ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007f0:	78b9      	ldrb	r1, [r7, #2]
 80007f2:	78fa      	ldrb	r2, [r7, #3]
 80007f4:	f002 0207 	and.w	r2, r2, #7
 80007f8:	0092      	lsls	r2, r2, #2
 80007fa:	fa01 f202 	lsl.w	r2, r1, r2
 80007fe:	4611      	mov	r1, r2
 8000800:	4602      	mov	r2, r0
 8000802:	4319      	orrs	r1, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3208      	adds	r2, #8
 8000808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <GPIO_Resistor_Enable>:
	GPIOx->ODR = value;
}

//Habilita os resistores de pull-up ou pull-down
void GPIO_Resistor_Enable(GPIO_TypeDef* GPIOx, uint8_t pin, uint8_t mode)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	460b      	mov	r3, r1
 8000822:	70fb      	strb	r3, [r7, #3]
 8000824:	4613      	mov	r3, r2
 8000826:	70bb      	strb	r3, [r7, #2]
	GPIOx->PUPDR &= ~(0b11 << 2*pin);	//desabilita qualquer resistor
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	78fa      	ldrb	r2, [r7, #3]
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	2103      	movs	r1, #3
 8000832:	fa01 f202 	lsl.w	r2, r1, r2
 8000836:	43d2      	mvns	r2, r2
 8000838:	401a      	ands	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	60da      	str	r2, [r3, #12]
	GPIOx->PUPDR |= (mode << 2*pin);	//habilita o resistor selecionado
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	68db      	ldr	r3, [r3, #12]
 8000842:	78b9      	ldrb	r1, [r7, #2]
 8000844:	78fa      	ldrb	r2, [r7, #3]
 8000846:	0052      	lsls	r2, r2, #1
 8000848:	fa01 f202 	lsl.w	r2, r1, r2
 800084c:	431a      	orrs	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	60da      	str	r2, [r3, #12]
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
	...

08000860 <EXTI_Config_Helper>:

//Funções de manipulação das interrupções externas
//Função de configuração
//#define EXTI_Config(...)	EXTI_Config_Helper(__VA_ARGS__)
void EXTI_Config_Helper(uint8_t exti_line, GPIO_TypeDef* GPIOx, uint8_t trigger1, uint8_t trigger2)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6039      	str	r1, [r7, #0]
 8000868:	4611      	mov	r1, r2
 800086a:	461a      	mov	r2, r3
 800086c:	4603      	mov	r3, r0
 800086e:	71fb      	strb	r3, [r7, #7]
 8000870:	460b      	mov	r3, r1
 8000872:	71bb      	strb	r3, [r7, #6]
 8000874:	4613      	mov	r3, r2
 8000876:	717b      	strb	r3, [r7, #5]
	uint8_t index = exti_line / 4;          //calcula o índice de EXTICR[]
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	089b      	lsrs	r3, r3, #2
 800087c:	73fb      	strb	r3, [r7, #15]
	uint8_t shift = (exti_line % 4) * 4;    //calcula o campo de bits dentro do EXTICR[index]
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	f003 0303 	and.w	r3, r3, #3
 8000884:	b2db      	uxtb	r3, r3
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	73bb      	strb	r3, [r7, #14]
	uint8_t port = ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE)); //calcula o número da porta GPIO
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	f103 433f 	add.w	r3, r3, #3204448256	@ 0xbf000000
 8000890:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 8000894:	0a9b      	lsrs	r3, r3, #10
 8000896:	737b      	strb	r3, [r7, #13]

	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;		//habilita o clock de SYSCFG
 8000898:	4b22      	ldr	r3, [pc, #136]	@ (8000924 <EXTI_Config_Helper+0xc4>)
 800089a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089c:	4a21      	ldr	r2, [pc, #132]	@ (8000924 <EXTI_Config_Helper+0xc4>)
 800089e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008a2:	6453      	str	r3, [r2, #68]	@ 0x44
	SYSCFG->EXTICR[index] |= (port << shift);	//seleciona a porta/pino como gatilho de EXTI
 80008a4:	4a20      	ldr	r2, [pc, #128]	@ (8000928 <EXTI_Config_Helper+0xc8>)
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	3302      	adds	r3, #2
 80008aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008ae:	7b79      	ldrb	r1, [r7, #13]
 80008b0:	7bbb      	ldrb	r3, [r7, #14]
 80008b2:	fa01 f303 	lsl.w	r3, r1, r3
 80008b6:	4618      	mov	r0, r3
 80008b8:	491b      	ldr	r1, [pc, #108]	@ (8000928 <EXTI_Config_Helper+0xc8>)
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
 80008bc:	4302      	orrs	r2, r0
 80008be:	3302      	adds	r3, #2
 80008c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if((trigger1 == FALLING_EDGE) || (trigger2 == FALLING_EDGE))
 80008c4:	79bb      	ldrb	r3, [r7, #6]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d002      	beq.n	80008d0 <EXTI_Config_Helper+0x70>
 80008ca:	797b      	ldrb	r3, [r7, #5]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d109      	bne.n	80008e4 <EXTI_Config_Helper+0x84>
		EXTI->FTSR |= 1 << exti_line;	//seleciona borda de descida
 80008d0:	4b16      	ldr	r3, [pc, #88]	@ (800092c <EXTI_Config_Helper+0xcc>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	79fa      	ldrb	r2, [r7, #7]
 80008d6:	2101      	movs	r1, #1
 80008d8:	fa01 f202 	lsl.w	r2, r1, r2
 80008dc:	4611      	mov	r1, r2
 80008de:	4a13      	ldr	r2, [pc, #76]	@ (800092c <EXTI_Config_Helper+0xcc>)
 80008e0:	430b      	orrs	r3, r1
 80008e2:	60d3      	str	r3, [r2, #12]
	if((trigger1 == RISING_EDGE) || (trigger2 == RISING_EDGE))
 80008e4:	79bb      	ldrb	r3, [r7, #6]
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d002      	beq.n	80008f0 <EXTI_Config_Helper+0x90>
 80008ea:	797b      	ldrb	r3, [r7, #5]
 80008ec:	2b02      	cmp	r3, #2
 80008ee:	d109      	bne.n	8000904 <EXTI_Config_Helper+0xa4>
		EXTI->RTSR |= 1 << exti_line;	//seleciona borda de subida
 80008f0:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <EXTI_Config_Helper+0xcc>)
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	79fa      	ldrb	r2, [r7, #7]
 80008f6:	2101      	movs	r1, #1
 80008f8:	fa01 f202 	lsl.w	r2, r1, r2
 80008fc:	4611      	mov	r1, r2
 80008fe:	4a0b      	ldr	r2, [pc, #44]	@ (800092c <EXTI_Config_Helper+0xcc>)
 8000900:	430b      	orrs	r3, r1
 8000902:	6093      	str	r3, [r2, #8]

	EXTI->IMR |= 1 << exti_line;	//habilita a interrupção EXTI
 8000904:	4b09      	ldr	r3, [pc, #36]	@ (800092c <EXTI_Config_Helper+0xcc>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	79fa      	ldrb	r2, [r7, #7]
 800090a:	2101      	movs	r1, #1
 800090c:	fa01 f202 	lsl.w	r2, r1, r2
 8000910:	4611      	mov	r1, r2
 8000912:	4a06      	ldr	r2, [pc, #24]	@ (800092c <EXTI_Config_Helper+0xcc>)
 8000914:	430b      	orrs	r3, r1
 8000916:	6013      	str	r3, [r2, #0]
}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	40023800 	.word	0x40023800
 8000928:	40013800 	.word	0x40013800
 800092c:	40013c00 	.word	0x40013c00

08000930 <EXTI_Config3>:

//Função de configuração com 3 argumentos
void EXTI_Config3(uint8_t exti_line, GPIO_TypeDef* GPIOx, uint8_t trigger1)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	6039      	str	r1, [r7, #0]
 800093a:	71fb      	strb	r3, [r7, #7]
 800093c:	4613      	mov	r3, r2
 800093e:	71bb      	strb	r3, [r7, #6]
    EXTI_Config_Helper(exti_line, GPIOx, trigger1, 0);
 8000940:	79ba      	ldrb	r2, [r7, #6]
 8000942:	79f8      	ldrb	r0, [r7, #7]
 8000944:	2300      	movs	r3, #0
 8000946:	6839      	ldr	r1, [r7, #0]
 8000948:	f7ff ff8a 	bl	8000860 <EXTI_Config_Helper>
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <EXTI_Clear_Pending>:
    EXTI_Config_Helper(exti_line, GPIOx, trigger1, trigger2);
}

//Função de limpeza de flag de pendência
static inline void EXTI_Clear_Pending(uint8_t exti_line)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
	EXTI->PR |= 1 << exti_line;	//limpa o flag de pendência em EXTI
 800095e:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <EXTI_Clear_Pending+0x2c>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	79fa      	ldrb	r2, [r7, #7]
 8000964:	2101      	movs	r1, #1
 8000966:	fa01 f202 	lsl.w	r2, r1, r2
 800096a:	4611      	mov	r1, r2
 800096c:	4a04      	ldr	r2, [pc, #16]	@ (8000980 <EXTI_Clear_Pending+0x2c>)
 800096e:	430b      	orrs	r3, r1
 8000970:	6153      	str	r3, [r2, #20]
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40013c00 	.word	0x40013c00

08000984 <USART1_Init>:


//Funções de periféricos de comunicação
//Configuração básica da USART1
void USART1_Init(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
	//Configuração da USART1
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;				//habilita o clock da USART1
 8000988:	4b13      	ldr	r3, [pc, #76]	@ (80009d8 <USART1_Init+0x54>)
 800098a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800098c:	4a12      	ldr	r2, [pc, #72]	@ (80009d8 <USART1_Init+0x54>)
 800098e:	f043 0310 	orr.w	r3, r3, #16
 8000992:	6453      	str	r3, [r2, #68]	@ 0x44
	USART1->BRR = 84;									//ajusta baud rate para 1 Mbps (frequência do periférico de 84MHz)
 8000994:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <USART1_Init+0x58>)
 8000996:	2254      	movs	r2, #84	@ 0x54
 8000998:	609a      	str	r2, [r3, #8]
	//O estado default do registrador USART1->CR1 garante:
	//1 stop bit, 8 bits de dados, sem bit de paridade,
	//oversampling de 16 amostras por bit
	USART1->CR1 |= (USART_CR1_TE | USART_CR1_UE);		//habilita apenas o transmissor e a USART1
 800099a:	4b10      	ldr	r3, [pc, #64]	@ (80009dc <USART1_Init+0x58>)
 800099c:	68db      	ldr	r3, [r3, #12]
 800099e:	4a0f      	ldr	r2, [pc, #60]	@ (80009dc <USART1_Init+0x58>)
 80009a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009a4:	f043 0308 	orr.w	r3, r3, #8
 80009a8:	60d3      	str	r3, [r2, #12]
	//Habilita a interrupção da USART1 no NVIC
	//NVIC_SetPriority(USART1_IRQn, 0);	//seta a prioridade da USART1
	//NVIC_EnableIRQ(USART1_IRQn);		//habilita a interrupção da USART1

	//Configuração dos pinos PA9 (TX) e PA10(RX)
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;			//habilita o clock do GPIOA
 80009aa:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <USART1_Init+0x54>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a0a      	ldr	r2, [pc, #40]	@ (80009d8 <USART1_Init+0x54>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER |= (0b10 << 20) | (0b10 << 18);	//pinos PA10 e PA9 em função alternativa
 80009b6:	4b0a      	ldr	r3, [pc, #40]	@ (80009e0 <USART1_Init+0x5c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a09      	ldr	r2, [pc, #36]	@ (80009e0 <USART1_Init+0x5c>)
 80009bc:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 80009c0:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] |= (0b0111 << 8) | (0b0111 << 4);	//função alternativa 7 (USART1)
 80009c2:	4b07      	ldr	r3, [pc, #28]	@ (80009e0 <USART1_Init+0x5c>)
 80009c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009c6:	4a06      	ldr	r2, [pc, #24]	@ (80009e0 <USART1_Init+0x5c>)
 80009c8:	f443 63ee 	orr.w	r3, r3, #1904	@ 0x770
 80009cc:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40011000 	.word	0x40011000
 80009e0:	40020000 	.word	0x40020000

080009e4 <__io_putchar>:

//Redefinição da função de envio de dados pela USART1
int __io_putchar(int ch)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	USART1->DR = ch;						//transmite o dado
 80009ec:	4a08      	ldr	r2, [pc, #32]	@ (8000a10 <__io_putchar+0x2c>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6053      	str	r3, [r2, #4]
	while (!(USART1->SR & USART_SR_TXE));	//espera pelo fim da transmissão
 80009f2:	bf00      	nop
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <__io_putchar+0x2c>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d0f9      	beq.n	80009f4 <__io_putchar+0x10>
	return ch;
 8000a00:	687b      	ldr	r3, [r7, #4]
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40011000 	.word	0x40011000

08000a14 <__io_getchar>:

//Redefinição da função de recebimento de dados pela USART1
int __io_getchar(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
   return (uint16_t)(USART1->DR);	//lê o dado recebido
 8000a18:	4b03      	ldr	r3, [pc, #12]	@ (8000a28 <__io_getchar+0x14>)
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	b29b      	uxth	r3, r3
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	40011000 	.word	0x40011000

08000a2c <USART1_IRQHandler>:

//ISR da USART1. Todas as ISR's estão definidas no arquivo startup_stm32f407vetx.s
void USART1_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
	__io_putchar(__io_getchar());	//lê o dado e reenvia pela USART1
 8000a30:	f7ff fff0 	bl	8000a14 <__io_getchar>
 8000a34:	4603      	mov	r3, r0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff ffd4 	bl	80009e4 <__io_putchar>
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a44:	f000 fb18 	bl	8001078 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a48:	f000 f8b6 	bl	8000bb8 <SystemClock_Config>
  // HAL_SYSTICK_Config(SystemCoreClock / 5);

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4c:	f000 f91e 	bl	8000c8c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

	Utility_Init();
 8000a50:	f7ff fdbc 	bl	80005cc <Utility_Init>
	USART1_Init(); // Permite utilizar prints
 8000a54:	f7ff ff96 	bl	8000984 <USART1_Init>
//========================Questão 9 sobre sistemas===============================
	GPIO_Clock_Enable(GPIOA);
 8000a58:	4851      	ldr	r0, [pc, #324]	@ (8000ba0 <main+0x160>)
 8000a5a:	f7ff fe65 	bl	8000728 <GPIO_Clock_Enable>
	 GPIO_Clock_Enable(GPIOB);
 8000a5e:	4851      	ldr	r0, [pc, #324]	@ (8000ba4 <main+0x164>)
 8000a60:	f7ff fe62 	bl	8000728 <GPIO_Clock_Enable>
	 GPIO_Pin_Mode(GPIOB, PIN_0, INPUT);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2100      	movs	r1, #0
 8000a68:	484e      	ldr	r0, [pc, #312]	@ (8000ba4 <main+0x164>)
 8000a6a:	f7ff fe77 	bl	800075c <GPIO_Pin_Mode>
	 GPIO_Pin_Mode(GPIOB, PIN_1, INPUT);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2101      	movs	r1, #1
 8000a72:	484c      	ldr	r0, [pc, #304]	@ (8000ba4 <main+0x164>)
 8000a74:	f7ff fe72 	bl	800075c <GPIO_Pin_Mode>
	 GPIO_Resistor_Enable(GPIOB, PIN_0, PULL_DOWN);
 8000a78:	2202      	movs	r2, #2
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4849      	ldr	r0, [pc, #292]	@ (8000ba4 <main+0x164>)
 8000a7e:	f7ff fecb 	bl	8000818 <GPIO_Resistor_Enable>
	 GPIO_Resistor_Enable(GPIOB, PIN_1, PULL_DOWN);
 8000a82:	2202      	movs	r2, #2
 8000a84:	2101      	movs	r1, #1
 8000a86:	4847      	ldr	r0, [pc, #284]	@ (8000ba4 <main+0x164>)
 8000a88:	f7ff fec6 	bl	8000818 <GPIO_Resistor_Enable>

	 EXTI_Config(EXTI0, GPIOB, RISING_EDGE);
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	4945      	ldr	r1, [pc, #276]	@ (8000ba4 <main+0x164>)
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff ff4d 	bl	8000930 <EXTI_Config3>
	 EXTI_Config(EXTI1, GPIOB, RISING_EDGE);
 8000a96:	2202      	movs	r2, #2
 8000a98:	4942      	ldr	r1, [pc, #264]	@ (8000ba4 <main+0x164>)
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f7ff ff48 	bl	8000930 <EXTI_Config3>

	 NVIC_SetPriority(EXTI0_IRQn, 0);
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	2006      	movs	r0, #6
 8000aa4:	f7ff fd68 	bl	8000578 <__NVIC_SetPriority>
	 NVIC_EnableIRQ  (EXTI0_IRQn);
 8000aa8:	2006      	movs	r0, #6
 8000aaa:	f7ff fd47 	bl	800053c <__NVIC_EnableIRQ>


	 NVIC_SetPriority(EXTI1_IRQn, 0);
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2007      	movs	r0, #7
 8000ab2:	f7ff fd61 	bl	8000578 <__NVIC_SetPriority>
	 NVIC_EnableIRQ  (EXTI1_IRQn);
 8000ab6:	2007      	movs	r0, #7
 8000ab8:	f7ff fd40 	bl	800053c <__NVIC_EnableIRQ>


	// Configura PA1 como output PWM do TIM5_CH2


	    GPIO_Pin_Mode(GPIOA, PIN_1, ALTERNATE);
 8000abc:	2202      	movs	r2, #2
 8000abe:	2101      	movs	r1, #1
 8000ac0:	4837      	ldr	r0, [pc, #220]	@ (8000ba0 <main+0x160>)
 8000ac2:	f7ff fe4b 	bl	800075c <GPIO_Pin_Mode>
	    GPIO_Pin_Mode(GPIOA,PIN_4,ALTERNATE);
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	2104      	movs	r1, #4
 8000aca:	4835      	ldr	r0, [pc, #212]	@ (8000ba0 <main+0x160>)
 8000acc:	f7ff fe46 	bl	800075c <GPIO_Pin_Mode>
	    GPIO_Alternate_Function(GPIOA, PIN_1, AF2);
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	4832      	ldr	r0, [pc, #200]	@ (8000ba0 <main+0x160>)
 8000ad6:	f7ff fe64 	bl	80007a2 <GPIO_Alternate_Function>

	    // Configura TIM5
	    //Aqui é da questão 8

	    RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 8000ada:	4b33      	ldr	r3, [pc, #204]	@ (8000ba8 <main+0x168>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ade:	4a32      	ldr	r2, [pc, #200]	@ (8000ba8 <main+0x168>)
 8000ae0:	f043 0308 	orr.w	r3, r3, #8
 8000ae4:	6413      	str	r3, [r2, #64]	@ 0x40
	    TIM5->PSC   = 8400 - 1;   // 1 tick = 1 ms
 8000ae6:	4b31      	ldr	r3, [pc, #196]	@ (8000bac <main+0x16c>)
 8000ae8:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000aec:	629a      	str	r2, [r3, #40]	@ 0x28
	    TIM5->ARR   = 10000  - 1;   // período = 1000 ms = 1 Hz
 8000aee:	4b2f      	ldr	r3, [pc, #188]	@ (8000bac <main+0x16c>)
 8000af0:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000af4:	62da      	str	r2, [r3, #44]	@ 0x2c
	    TIM5->CCR2  =  5000;         // duty = 500 ms (50%)
 8000af6:	4b2d      	ldr	r3, [pc, #180]	@ (8000bac <main+0x16c>)
 8000af8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000afc:	639a      	str	r2, [r3, #56]	@ 0x38
	    TIM5->CCMR1 = (TIM5->CCMR1 & ~(0b111 << 12)) | (6 << 12);  // PWM1
 8000afe:	4b2b      	ldr	r3, [pc, #172]	@ (8000bac <main+0x16c>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8000b06:	4a29      	ldr	r2, [pc, #164]	@ (8000bac <main+0x16c>)
 8000b08:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8000b0c:	6193      	str	r3, [r2, #24]
	    TIM5->CCER |= TIM_CCER_CC2E;
 8000b0e:	4b27      	ldr	r3, [pc, #156]	@ (8000bac <main+0x16c>)
 8000b10:	6a1b      	ldr	r3, [r3, #32]
 8000b12:	4a26      	ldr	r2, [pc, #152]	@ (8000bac <main+0x16c>)
 8000b14:	f043 0310 	orr.w	r3, r3, #16
 8000b18:	6213      	str	r3, [r2, #32]
	    TIM5->CR1  |= TIM_CR1_CEN;
 8000b1a:	4b24      	ldr	r3, [pc, #144]	@ (8000bac <main+0x16c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a23      	ldr	r2, [pc, #140]	@ (8000bac <main+0x16c>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6013      	str	r3, [r2, #0]
	    RCC->APB1ENR |= RCC_APB1ENR_DACEN; //habilita o clock da interface digital do dac
 8000b26:	4b20      	ldr	r3, [pc, #128]	@ (8000ba8 <main+0x168>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ba8 <main+0x168>)
 8000b2c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000b30:	6413      	str	r3, [r2, #64]	@ 0x40
	    DAC->CR |= DAC_CR_EN1;//habilita o canal 1 do dac
 8000b32:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb0 <main+0x170>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a1e      	ldr	r2, [pc, #120]	@ (8000bb0 <main+0x170>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6013      	str	r3, [r2, #0]





	GPIO_Clock_Enable(GPIOE);
 8000b3e:	481d      	ldr	r0, [pc, #116]	@ (8000bb4 <main+0x174>)
 8000b40:	f7ff fdf2 	bl	8000728 <GPIO_Clock_Enable>
	GPIO_Pin_Mode(GPIOE, PIN_3, INPUT);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2103      	movs	r1, #3
 8000b48:	481a      	ldr	r0, [pc, #104]	@ (8000bb4 <main+0x174>)
 8000b4a:	f7ff fe07 	bl	800075c <GPIO_Pin_Mode>
	GPIO_Pin_Mode(GPIOE, PIN_4, INPUT);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2104      	movs	r1, #4
 8000b52:	4818      	ldr	r0, [pc, #96]	@ (8000bb4 <main+0x174>)
 8000b54:	f7ff fe02 	bl	800075c <GPIO_Pin_Mode>

	GPIO_Resistor_Enable(GPIOE, PIN_3, PULL_UP);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2103      	movs	r1, #3
 8000b5c:	4815      	ldr	r0, [pc, #84]	@ (8000bb4 <main+0x174>)
 8000b5e:	f7ff fe5b 	bl	8000818 <GPIO_Resistor_Enable>
	GPIO_Resistor_Enable(GPIOE, PIN_4, PULL_UP);
 8000b62:	2201      	movs	r2, #1
 8000b64:	2104      	movs	r1, #4
 8000b66:	4813      	ldr	r0, [pc, #76]	@ (8000bb4 <main+0x174>)
 8000b68:	f7ff fe56 	bl	8000818 <GPIO_Resistor_Enable>
	EXTI_Config(EXTI3, GPIOE, FALLING_EDGE);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	4911      	ldr	r1, [pc, #68]	@ (8000bb4 <main+0x174>)
 8000b70:	2003      	movs	r0, #3
 8000b72:	f7ff fedd 	bl	8000930 <EXTI_Config3>
	EXTI_Config(EXTI4, GPIOE, FALLING_EDGE);
 8000b76:	2201      	movs	r2, #1
 8000b78:	490e      	ldr	r1, [pc, #56]	@ (8000bb4 <main+0x174>)
 8000b7a:	2004      	movs	r0, #4
 8000b7c:	f7ff fed8 	bl	8000930 <EXTI_Config3>

	NVIC_EnableIRQ(EXTI3_IRQn);
 8000b80:	2009      	movs	r0, #9
 8000b82:	f7ff fcdb 	bl	800053c <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI4_IRQn);
 8000b86:	200a      	movs	r0, #10
 8000b88:	f7ff fcd8 	bl	800053c <__NVIC_EnableIRQ>

	NVIC_SetPriority(EXTI3_IRQn, 0);
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2009      	movs	r0, #9
 8000b90:	f7ff fcf2 	bl	8000578 <__NVIC_SetPriority>
	NVIC_SetPriority(EXTI4_IRQn, 1);
 8000b94:	2101      	movs	r1, #1
 8000b96:	200a      	movs	r0, #10
 8000b98:	f7ff fcee 	bl	8000578 <__NVIC_SetPriority>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


	while (1) {
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <main+0x15c>
 8000ba0:	40020000 	.word	0x40020000
 8000ba4:	40020400 	.word	0x40020400
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40000c00 	.word	0x40000c00
 8000bb0:	40007400 	.word	0x40007400
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b094      	sub	sp, #80	@ 0x50
 8000bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bbe:	f107 0320 	add.w	r3, r7, #32
 8000bc2:	2230      	movs	r2, #48	@ 0x30
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f001 fbc0 	bl	800234c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	4b28      	ldr	r3, [pc, #160]	@ (8000c84 <SystemClock_Config+0xcc>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be4:	4a27      	ldr	r2, [pc, #156]	@ (8000c84 <SystemClock_Config+0xcc>)
 8000be6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bea:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bec:	4b25      	ldr	r3, [pc, #148]	@ (8000c84 <SystemClock_Config+0xcc>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	4b22      	ldr	r3, [pc, #136]	@ (8000c88 <SystemClock_Config+0xd0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a21      	ldr	r2, [pc, #132]	@ (8000c88 <SystemClock_Config+0xd0>)
 8000c02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	4b1f      	ldr	r3, [pc, #124]	@ (8000c88 <SystemClock_Config+0xd0>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c14:	2301      	movs	r3, #1
 8000c16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c22:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c28:	2304      	movs	r3, #4
 8000c2a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c2c:	23a8      	movs	r3, #168	@ 0xa8
 8000c2e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c30:	2302      	movs	r3, #2
 8000c32:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c34:	2304      	movs	r3, #4
 8000c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c38:	f107 0320 	add.w	r3, r7, #32
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 fd29 	bl	8001694 <HAL_RCC_OscConfig>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c48:	f000 f8da 	bl	8000e00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c50:	2302      	movs	r3, #2
 8000c52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c58:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	2105      	movs	r1, #5
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 ff8a 	bl	8001b84 <HAL_RCC_ClockConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c76:	f000 f8c3 	bl	8000e00 <Error_Handler>
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3750      	adds	r7, #80	@ 0x50
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40007000 	.word	0x40007000

08000c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	f107 030c 	add.w	r3, r7, #12
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	4b25      	ldr	r3, [pc, #148]	@ (8000d3c <MX_GPIO_Init+0xb0>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	4a24      	ldr	r2, [pc, #144]	@ (8000d3c <MX_GPIO_Init+0xb0>)
 8000cac:	f043 0310 	orr.w	r3, r3, #16
 8000cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb2:	4b22      	ldr	r3, [pc, #136]	@ (8000d3c <MX_GPIO_Init+0xb0>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	f003 0310 	and.w	r3, r3, #16
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d3c <MX_GPIO_Init+0xb0>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	4a1d      	ldr	r2, [pc, #116]	@ (8000d3c <MX_GPIO_Init+0xb0>)
 8000cc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cce:	4b1b      	ldr	r3, [pc, #108]	@ (8000d3c <MX_GPIO_Init+0xb0>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	603b      	str	r3, [r7, #0]
 8000cde:	4b17      	ldr	r3, [pc, #92]	@ (8000d3c <MX_GPIO_Init+0xb0>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a16      	ldr	r2, [pc, #88]	@ (8000d3c <MX_GPIO_Init+0xb0>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cea:	4b14      	ldr	r3, [pc, #80]	@ (8000d3c <MX_GPIO_Init+0xb0>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2103      	movs	r1, #3
 8000cfa:	4811      	ldr	r0, [pc, #68]	@ (8000d40 <MX_GPIO_Init+0xb4>)
 8000cfc:	f000 fcb0 	bl	8001660 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000d00:	2318      	movs	r3, #24
 8000d02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d04:	2300      	movs	r3, #0
 8000d06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	4619      	mov	r1, r3
 8000d12:	480c      	ldr	r0, [pc, #48]	@ (8000d44 <MX_GPIO_Init+0xb8>)
 8000d14:	f000 fb08 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4804      	ldr	r0, [pc, #16]	@ (8000d40 <MX_GPIO_Init+0xb4>)
 8000d30:	f000 fafa 	bl	8001328 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d34:	bf00      	nop
 8000d36:	3720      	adds	r7, #32
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020000 	.word	0x40020000
 8000d44:	40021000 	.word	0x40021000

08000d48 <EXTI3_IRQHandler>:
/* USER CODE BEGIN 4 */


// INTERRUPÇÕES

void EXTI3_IRQHandler() {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	printf("Interrupção em K1\n");
 8000d4c:	4807      	ldr	r0, [pc, #28]	@ (8000d6c <EXTI3_IRQHandler+0x24>)
 8000d4e:	f001 fa1d 	bl	800218c <puts>
	Delay_ms(2000);
 8000d52:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d56:	f7ff fccb 	bl	80006f0 <Delay_ms>
	printf("Saindo de K1\n");
 8000d5a:	4805      	ldr	r0, [pc, #20]	@ (8000d70 <EXTI3_IRQHandler+0x28>)
 8000d5c:	f001 fa16 	bl	800218c <puts>
	EXTI_Clear_Pending(EXTI3);
 8000d60:	2003      	movs	r0, #3
 8000d62:	f7ff fdf7 	bl	8000954 <EXTI_Clear_Pending>
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	080028cc 	.word	0x080028cc
 8000d70:	080028e0 	.word	0x080028e0

08000d74 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler() {
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	printf("Interrupção em K0\n");
 8000d78:	4807      	ldr	r0, [pc, #28]	@ (8000d98 <EXTI4_IRQHandler+0x24>)
 8000d7a:	f001 fa07 	bl	800218c <puts>
	Delay_ms(2000);
 8000d7e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d82:	f7ff fcb5 	bl	80006f0 <Delay_ms>
	printf("Saindo de K0\n");
 8000d86:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <EXTI4_IRQHandler+0x28>)
 8000d88:	f001 fa00 	bl	800218c <puts>
	EXTI_Clear_Pending(EXTI4);
 8000d8c:	2004      	movs	r0, #4
 8000d8e:	f7ff fde1 	bl	8000954 <EXTI_Clear_Pending>
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	080028f0 	.word	0x080028f0
 8000d9c:	08002904 	.word	0x08002904

08000da0 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
    if (TIM5->SR & TIM_SR_UIF) // Se houve interrupção por overflow
 8000da4:	4b08      	ldr	r3, [pc, #32]	@ (8000dc8 <TIM5_IRQHandler+0x28>)
 8000da6:	691b      	ldr	r3, [r3, #16]
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d008      	beq.n	8000dc2 <TIM5_IRQHandler+0x22>
    {
        TIM5->SR &= ~TIM_SR_UIF; // Limpa a flag
 8000db0:	4b05      	ldr	r3, [pc, #20]	@ (8000dc8 <TIM5_IRQHandler+0x28>)
 8000db2:	691b      	ldr	r3, [r3, #16]
 8000db4:	4a04      	ldr	r2, [pc, #16]	@ (8000dc8 <TIM5_IRQHandler+0x28>)
 8000db6:	f023 0301 	bic.w	r3, r3, #1
 8000dba:	6113      	str	r3, [r2, #16]
        printf("INTERRUPÇÃO DO TIMER 5: 1s se passou\r\n");
 8000dbc:	4803      	ldr	r0, [pc, #12]	@ (8000dcc <TIM5_IRQHandler+0x2c>)
 8000dbe:	f001 f9e5 	bl	800218c <puts>
    }
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40000c00 	.word	0x40000c00
 8000dcc:	08002914 	.word	0x08002914

08000dd0 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
    EXTI_Clear_Pending(0);
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f7ff fdbd 	bl	8000954 <EXTI_Clear_Pending>
    printf("INTERRUPÇÃO EXTERNA EM PB0\r\n");
 8000dda:	4802      	ldr	r0, [pc, #8]	@ (8000de4 <EXTI0_IRQHandler+0x14>)
 8000ddc:	f001 f9d6 	bl	800218c <puts>
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	0800293c 	.word	0x0800293c

08000de8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
    EXTI_Clear_Pending(1);
 8000dec:	2001      	movs	r0, #1
 8000dee:	f7ff fdb1 	bl	8000954 <EXTI_Clear_Pending>
    printf("INTERRUPÇÃO EXTERNA EM PB1\r\n");
 8000df2:	4802      	ldr	r0, [pc, #8]	@ (8000dfc <EXTI1_IRQHandler+0x14>)
 8000df4:	f001 f9ca 	bl	800218c <puts>
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	0800295c 	.word	0x0800295c

08000e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e04:	b672      	cpsid	i
}
 8000e06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <Error_Handler+0x8>

08000e0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	4b10      	ldr	r3, [pc, #64]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e22:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	603b      	str	r3, [r7, #0]
 8000e32:	4b09      	ldr	r3, [pc, #36]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e36:	4a08      	ldr	r2, [pc, #32]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800

08000e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <NMI_Handler+0x4>

08000e64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <MemManage_Handler+0x4>

08000e74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <BusFault_Handler+0x4>

08000e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <UsageFault_Handler+0x4>

08000e84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb2:	f000 f933 	bl	800111c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <_read>:
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b086      	sub	sp, #24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	60f8      	str	r0, [r7, #12]
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	e00a      	b.n	8000ee2 <_read+0x28>
 8000ecc:	f7ff fda2 	bl	8000a14 <__io_getchar>
 8000ed0:	4601      	mov	r1, r0
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	1c5a      	adds	r2, r3, #1
 8000ed6:	60ba      	str	r2, [r7, #8]
 8000ed8:	b2ca      	uxtb	r2, r1
 8000eda:	701a      	strb	r2, [r3, #0]
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	617b      	str	r3, [r7, #20]
 8000ee2:	697a      	ldr	r2, [r7, #20]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	dbf0      	blt.n	8000ecc <_read+0x12>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4618      	mov	r0, r3
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <_write>:
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	e009      	b.n	8000f1a <_write+0x26>
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	60ba      	str	r2, [r7, #8]
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fd68 	bl	80009e4 <__io_putchar>
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	3301      	adds	r3, #1
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	dbf1      	blt.n	8000f06 <_write+0x12>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <_close>:
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <_fstat>:
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	2300      	movs	r3, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <_isatty>:
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <_lseek>:
 8000f7a:	b480      	push	{r7}
 8000f7c:	b085      	sub	sp, #20
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	60f8      	str	r0, [r7, #12]
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	2300      	movs	r3, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <_sbrk>:
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	4a14      	ldr	r2, [pc, #80]	@ (8000ff0 <_sbrk+0x5c>)
 8000f9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <_sbrk+0x60>)
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	4b13      	ldr	r3, [pc, #76]	@ (8000ff8 <_sbrk+0x64>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d102      	bne.n	8000fb6 <_sbrk+0x22>
 8000fb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <_sbrk+0x64>)
 8000fb2:	4a12      	ldr	r2, [pc, #72]	@ (8000ffc <_sbrk+0x68>)
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <_sbrk+0x64>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d207      	bcs.n	8000fd4 <_sbrk+0x40>
 8000fc4:	f001 fa10 	bl	80023e8 <__errno>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	220c      	movs	r2, #12
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fd2:	e009      	b.n	8000fe8 <_sbrk+0x54>
 8000fd4:	4b08      	ldr	r3, [pc, #32]	@ (8000ff8 <_sbrk+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	4b07      	ldr	r3, [pc, #28]	@ (8000ff8 <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	4a05      	ldr	r2, [pc, #20]	@ (8000ff8 <_sbrk+0x64>)
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20020000 	.word	0x20020000
 8000ff4:	00000400 	.word	0x00000400
 8000ff8:	20000084 	.word	0x20000084
 8000ffc:	200001d8 	.word	0x200001d8

08001000 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001004:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <SystemInit+0x20>)
 8001006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800100a:	4a05      	ldr	r2, [pc, #20]	@ (8001020 <SystemInit+0x20>)
 800100c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001010:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <Reset_Handler>:
 8001024:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800105c <LoopFillZerobss+0xe>
 8001028:	f7ff ffea 	bl	8001000 <SystemInit>
 800102c:	480c      	ldr	r0, [pc, #48]	@ (8001060 <LoopFillZerobss+0x12>)
 800102e:	490d      	ldr	r1, [pc, #52]	@ (8001064 <LoopFillZerobss+0x16>)
 8001030:	4a0d      	ldr	r2, [pc, #52]	@ (8001068 <LoopFillZerobss+0x1a>)
 8001032:	2300      	movs	r3, #0
 8001034:	e002      	b.n	800103c <LoopCopyDataInit>

08001036 <CopyDataInit>:
 8001036:	58d4      	ldr	r4, [r2, r3]
 8001038:	50c4      	str	r4, [r0, r3]
 800103a:	3304      	adds	r3, #4

0800103c <LoopCopyDataInit>:
 800103c:	18c4      	adds	r4, r0, r3
 800103e:	428c      	cmp	r4, r1
 8001040:	d3f9      	bcc.n	8001036 <CopyDataInit>
 8001042:	4a0a      	ldr	r2, [pc, #40]	@ (800106c <LoopFillZerobss+0x1e>)
 8001044:	4c0a      	ldr	r4, [pc, #40]	@ (8001070 <LoopFillZerobss+0x22>)
 8001046:	2300      	movs	r3, #0
 8001048:	e001      	b.n	800104e <LoopFillZerobss>

0800104a <FillZerobss>:
 800104a:	6013      	str	r3, [r2, #0]
 800104c:	3204      	adds	r2, #4

0800104e <LoopFillZerobss>:
 800104e:	42a2      	cmp	r2, r4
 8001050:	d3fb      	bcc.n	800104a <FillZerobss>
 8001052:	f001 f9cf 	bl	80023f4 <__libc_init_array>
 8001056:	f7ff fcf3 	bl	8000a40 <main>
 800105a:	4770      	bx	lr
 800105c:	20020000 	.word	0x20020000
 8001060:	20000000 	.word	0x20000000
 8001064:	20000068 	.word	0x20000068
 8001068:	080029ac 	.word	0x080029ac
 800106c:	20000068 	.word	0x20000068
 8001070:	200001d8 	.word	0x200001d8

08001074 <ADC_IRQHandler>:
 8001074:	e7fe      	b.n	8001074 <ADC_IRQHandler>
	...

08001078 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800107c:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <HAL_Init+0x40>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a0d      	ldr	r2, [pc, #52]	@ (80010b8 <HAL_Init+0x40>)
 8001082:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001086:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001088:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <HAL_Init+0x40>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0a      	ldr	r2, [pc, #40]	@ (80010b8 <HAL_Init+0x40>)
 800108e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001092:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001094:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <HAL_Init+0x40>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a07      	ldr	r2, [pc, #28]	@ (80010b8 <HAL_Init+0x40>)
 800109a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800109e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a0:	2003      	movs	r0, #3
 80010a2:	f000 f90d 	bl	80012c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010a6:	200f      	movs	r0, #15
 80010a8:	f000 f808 	bl	80010bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ac:	f7ff feae 	bl	8000e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40023c00 	.word	0x40023c00

080010bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c4:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <HAL_InitTick+0x54>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b12      	ldr	r3, [pc, #72]	@ (8001114 <HAL_InitTick+0x58>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4619      	mov	r1, r3
 80010ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f917 	bl	800130e <HAL_SYSTICK_Config>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00e      	b.n	8001108 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b0f      	cmp	r3, #15
 80010ee:	d80a      	bhi.n	8001106 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f0:	2200      	movs	r2, #0
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010f8:	f000 f8ed 	bl	80012d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010fc:	4a06      	ldr	r2, [pc, #24]	@ (8001118 <HAL_InitTick+0x5c>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001102:	2300      	movs	r3, #0
 8001104:	e000      	b.n	8001108 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000000 	.word	0x20000000
 8001114:	20000008 	.word	0x20000008
 8001118:	20000004 	.word	0x20000004

0800111c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <HAL_IncTick+0x20>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <HAL_IncTick+0x24>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4413      	add	r3, r2
 800112c:	4a04      	ldr	r2, [pc, #16]	@ (8001140 <HAL_IncTick+0x24>)
 800112e:	6013      	str	r3, [r2, #0]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000008 	.word	0x20000008
 8001140:	20000088 	.word	0x20000088

08001144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return uwTick;
 8001148:	4b03      	ldr	r3, [pc, #12]	@ (8001158 <HAL_GetTick+0x14>)
 800114a:	681b      	ldr	r3, [r3, #0]
}
 800114c:	4618      	mov	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000088 	.word	0x20000088

0800115c <__NVIC_SetPriorityGrouping>:
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800116c:	4b0c      	ldr	r3, [pc, #48]	@ (80011a0 <__NVIC_SetPriorityGrouping+0x44>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001172:	68ba      	ldr	r2, [r7, #8]
 8001174:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001178:	4013      	ands	r3, r2
 800117a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001184:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001188:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800118c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118e:	4a04      	ldr	r2, [pc, #16]	@ (80011a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	60d3      	str	r3, [r2, #12]
}
 8001194:	bf00      	nop
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <__NVIC_GetPriorityGrouping>:
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a8:	4b04      	ldr	r3, [pc, #16]	@ (80011bc <__NVIC_GetPriorityGrouping+0x18>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	f003 0307 	and.w	r3, r3, #7
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_SetPriority>:
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	6039      	str	r1, [r7, #0]
 80011ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	db0a      	blt.n	80011ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	490c      	ldr	r1, [pc, #48]	@ (800120c <__NVIC_SetPriority+0x4c>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	0112      	lsls	r2, r2, #4
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	440b      	add	r3, r1
 80011e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80011e8:	e00a      	b.n	8001200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4908      	ldr	r1, [pc, #32]	@ (8001210 <__NVIC_SetPriority+0x50>)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	3b04      	subs	r3, #4
 80011f8:	0112      	lsls	r2, r2, #4
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	440b      	add	r3, r1
 80011fe:	761a      	strb	r2, [r3, #24]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000e100 	.word	0xe000e100
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001214:	b480      	push	{r7}
 8001216:	b089      	sub	sp, #36	@ 0x24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f1c3 0307 	rsb	r3, r3, #7
 800122e:	2b04      	cmp	r3, #4
 8001230:	bf28      	it	cs
 8001232:	2304      	movcs	r3, #4
 8001234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3304      	adds	r3, #4
 800123a:	2b06      	cmp	r3, #6
 800123c:	d902      	bls.n	8001244 <NVIC_EncodePriority+0x30>
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3b03      	subs	r3, #3
 8001242:	e000      	b.n	8001246 <NVIC_EncodePriority+0x32>
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43da      	mvns	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	401a      	ands	r2, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800125c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa01 f303 	lsl.w	r3, r1, r3
 8001266:	43d9      	mvns	r1, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	4313      	orrs	r3, r2
         );
}
 800126e:	4618      	mov	r0, r3
 8001270:	3724      	adds	r7, #36	@ 0x24
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800128c:	d301      	bcc.n	8001292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800128e:	2301      	movs	r3, #1
 8001290:	e00f      	b.n	80012b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001292:	4a0a      	ldr	r2, [pc, #40]	@ (80012bc <SysTick_Config+0x40>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3b01      	subs	r3, #1
 8001298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129a:	210f      	movs	r1, #15
 800129c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012a0:	f7ff ff8e 	bl	80011c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a4:	4b05      	ldr	r3, [pc, #20]	@ (80012bc <SysTick_Config+0x40>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012aa:	4b04      	ldr	r3, [pc, #16]	@ (80012bc <SysTick_Config+0x40>)
 80012ac:	2207      	movs	r2, #7
 80012ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	e000e010 	.word	0xe000e010

080012c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ff47 	bl	800115c <__NVIC_SetPriorityGrouping>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b086      	sub	sp, #24
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
 80012e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e8:	f7ff ff5c 	bl	80011a4 <__NVIC_GetPriorityGrouping>
 80012ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	68b9      	ldr	r1, [r7, #8]
 80012f2:	6978      	ldr	r0, [r7, #20]
 80012f4:	f7ff ff8e 	bl	8001214 <NVIC_EncodePriority>
 80012f8:	4602      	mov	r2, r0
 80012fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fe:	4611      	mov	r1, r2
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff5d 	bl	80011c0 <__NVIC_SetPriority>
}
 8001306:	bf00      	nop
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff ffb0 	bl	800127c <SysTick_Config>
 800131c:	4603      	mov	r3, r0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001328:	b480      	push	{r7}
 800132a:	b089      	sub	sp, #36	@ 0x24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800133a:	2300      	movs	r3, #0
 800133c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
 8001342:	e16b      	b.n	800161c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001344:	2201      	movs	r2, #1
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	429a      	cmp	r2, r3
 800135e:	f040 815a 	bne.w	8001616 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 0303 	and.w	r3, r3, #3
 800136a:	2b01      	cmp	r3, #1
 800136c:	d005      	beq.n	800137a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001376:	2b02      	cmp	r3, #2
 8001378:	d130      	bne.n	80013dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	2203      	movs	r2, #3
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	68da      	ldr	r2, [r3, #12]
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013b0:	2201      	movs	r2, #1
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	091b      	lsrs	r3, r3, #4
 80013c6:	f003 0201 	and.w	r2, r3, #1
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	2b03      	cmp	r3, #3
 80013e6:	d017      	beq.n	8001418 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	2203      	movs	r2, #3
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d123      	bne.n	800146c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	08da      	lsrs	r2, r3, #3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3208      	adds	r2, #8
 800142c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001430:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	220f      	movs	r2, #15
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	691a      	ldr	r2, [r3, #16]
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	08da      	lsrs	r2, r3, #3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3208      	adds	r2, #8
 8001466:	69b9      	ldr	r1, [r7, #24]
 8001468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	2203      	movs	r2, #3
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4013      	ands	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0203 	and.w	r2, r3, #3
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 80b4 	beq.w	8001616 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	4b60      	ldr	r3, [pc, #384]	@ (8001634 <HAL_GPIO_Init+0x30c>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b6:	4a5f      	ldr	r2, [pc, #380]	@ (8001634 <HAL_GPIO_Init+0x30c>)
 80014b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80014be:	4b5d      	ldr	r3, [pc, #372]	@ (8001634 <HAL_GPIO_Init+0x30c>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ca:	4a5b      	ldr	r2, [pc, #364]	@ (8001638 <HAL_GPIO_Init+0x310>)
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	089b      	lsrs	r3, r3, #2
 80014d0:	3302      	adds	r3, #2
 80014d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f003 0303 	and.w	r3, r3, #3
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	220f      	movs	r2, #15
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4013      	ands	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a52      	ldr	r2, [pc, #328]	@ (800163c <HAL_GPIO_Init+0x314>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d02b      	beq.n	800154e <HAL_GPIO_Init+0x226>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a51      	ldr	r2, [pc, #324]	@ (8001640 <HAL_GPIO_Init+0x318>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d025      	beq.n	800154a <HAL_GPIO_Init+0x222>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a50      	ldr	r2, [pc, #320]	@ (8001644 <HAL_GPIO_Init+0x31c>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d01f      	beq.n	8001546 <HAL_GPIO_Init+0x21e>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a4f      	ldr	r2, [pc, #316]	@ (8001648 <HAL_GPIO_Init+0x320>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d019      	beq.n	8001542 <HAL_GPIO_Init+0x21a>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a4e      	ldr	r2, [pc, #312]	@ (800164c <HAL_GPIO_Init+0x324>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d013      	beq.n	800153e <HAL_GPIO_Init+0x216>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a4d      	ldr	r2, [pc, #308]	@ (8001650 <HAL_GPIO_Init+0x328>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d00d      	beq.n	800153a <HAL_GPIO_Init+0x212>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a4c      	ldr	r2, [pc, #304]	@ (8001654 <HAL_GPIO_Init+0x32c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d007      	beq.n	8001536 <HAL_GPIO_Init+0x20e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a4b      	ldr	r2, [pc, #300]	@ (8001658 <HAL_GPIO_Init+0x330>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d101      	bne.n	8001532 <HAL_GPIO_Init+0x20a>
 800152e:	2307      	movs	r3, #7
 8001530:	e00e      	b.n	8001550 <HAL_GPIO_Init+0x228>
 8001532:	2308      	movs	r3, #8
 8001534:	e00c      	b.n	8001550 <HAL_GPIO_Init+0x228>
 8001536:	2306      	movs	r3, #6
 8001538:	e00a      	b.n	8001550 <HAL_GPIO_Init+0x228>
 800153a:	2305      	movs	r3, #5
 800153c:	e008      	b.n	8001550 <HAL_GPIO_Init+0x228>
 800153e:	2304      	movs	r3, #4
 8001540:	e006      	b.n	8001550 <HAL_GPIO_Init+0x228>
 8001542:	2303      	movs	r3, #3
 8001544:	e004      	b.n	8001550 <HAL_GPIO_Init+0x228>
 8001546:	2302      	movs	r3, #2
 8001548:	e002      	b.n	8001550 <HAL_GPIO_Init+0x228>
 800154a:	2301      	movs	r3, #1
 800154c:	e000      	b.n	8001550 <HAL_GPIO_Init+0x228>
 800154e:	2300      	movs	r3, #0
 8001550:	69fa      	ldr	r2, [r7, #28]
 8001552:	f002 0203 	and.w	r2, r2, #3
 8001556:	0092      	lsls	r2, r2, #2
 8001558:	4093      	lsls	r3, r2
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001560:	4935      	ldr	r1, [pc, #212]	@ (8001638 <HAL_GPIO_Init+0x310>)
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	089b      	lsrs	r3, r3, #2
 8001566:	3302      	adds	r3, #2
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800156e:	4b3b      	ldr	r3, [pc, #236]	@ (800165c <HAL_GPIO_Init+0x334>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	4313      	orrs	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001592:	4a32      	ldr	r2, [pc, #200]	@ (800165c <HAL_GPIO_Init+0x334>)
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001598:	4b30      	ldr	r3, [pc, #192]	@ (800165c <HAL_GPIO_Init+0x334>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015bc:	4a27      	ldr	r2, [pc, #156]	@ (800165c <HAL_GPIO_Init+0x334>)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015c2:	4b26      	ldr	r3, [pc, #152]	@ (800165c <HAL_GPIO_Init+0x334>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015e6:	4a1d      	ldr	r2, [pc, #116]	@ (800165c <HAL_GPIO_Init+0x334>)
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015ec:	4b1b      	ldr	r3, [pc, #108]	@ (800165c <HAL_GPIO_Init+0x334>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001610:	4a12      	ldr	r2, [pc, #72]	@ (800165c <HAL_GPIO_Init+0x334>)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3301      	adds	r3, #1
 800161a:	61fb      	str	r3, [r7, #28]
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	2b0f      	cmp	r3, #15
 8001620:	f67f ae90 	bls.w	8001344 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	3724      	adds	r7, #36	@ 0x24
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800
 8001638:	40013800 	.word	0x40013800
 800163c:	40020000 	.word	0x40020000
 8001640:	40020400 	.word	0x40020400
 8001644:	40020800 	.word	0x40020800
 8001648:	40020c00 	.word	0x40020c00
 800164c:	40021000 	.word	0x40021000
 8001650:	40021400 	.word	0x40021400
 8001654:	40021800 	.word	0x40021800
 8001658:	40021c00 	.word	0x40021c00
 800165c:	40013c00 	.word	0x40013c00

08001660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	807b      	strh	r3, [r7, #2]
 800166c:	4613      	mov	r3, r2
 800166e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001670:	787b      	ldrb	r3, [r7, #1]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001676:	887a      	ldrh	r2, [r7, #2]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800167c:	e003      	b.n	8001686 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800167e:	887b      	ldrh	r3, [r7, #2]
 8001680:	041a      	lsls	r2, r3, #16
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	619a      	str	r2, [r3, #24]
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e267      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d075      	beq.n	800179e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80016b2:	4b88      	ldr	r3, [pc, #544]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 030c 	and.w	r3, r3, #12
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d00c      	beq.n	80016d8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016be:	4b85      	ldr	r3, [pc, #532]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	d112      	bne.n	80016f0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ca:	4b82      	ldr	r3, [pc, #520]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80016d6:	d10b      	bne.n	80016f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d8:	4b7e      	ldr	r3, [pc, #504]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d05b      	beq.n	800179c <HAL_RCC_OscConfig+0x108>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d157      	bne.n	800179c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e242      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016f8:	d106      	bne.n	8001708 <HAL_RCC_OscConfig+0x74>
 80016fa:	4b76      	ldr	r3, [pc, #472]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a75      	ldr	r2, [pc, #468]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 8001700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	e01d      	b.n	8001744 <HAL_RCC_OscConfig+0xb0>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001710:	d10c      	bne.n	800172c <HAL_RCC_OscConfig+0x98>
 8001712:	4b70      	ldr	r3, [pc, #448]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a6f      	ldr	r2, [pc, #444]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 8001718:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	4b6d      	ldr	r3, [pc, #436]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a6c      	ldr	r2, [pc, #432]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 8001724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	e00b      	b.n	8001744 <HAL_RCC_OscConfig+0xb0>
 800172c:	4b69      	ldr	r3, [pc, #420]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a68      	ldr	r2, [pc, #416]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 8001732:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	4b66      	ldr	r3, [pc, #408]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a65      	ldr	r2, [pc, #404]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 800173e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001742:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d013      	beq.n	8001774 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174c:	f7ff fcfa 	bl	8001144 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001754:	f7ff fcf6 	bl	8001144 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b64      	cmp	r3, #100	@ 0x64
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e207      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001766:	4b5b      	ldr	r3, [pc, #364]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f0      	beq.n	8001754 <HAL_RCC_OscConfig+0xc0>
 8001772:	e014      	b.n	800179e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff fce6 	bl	8001144 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800177c:	f7ff fce2 	bl	8001144 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b64      	cmp	r3, #100	@ 0x64
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e1f3      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178e:	4b51      	ldr	r3, [pc, #324]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0xe8>
 800179a:	e000      	b.n	800179e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800179c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d063      	beq.n	8001872 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80017aa:	4b4a      	ldr	r3, [pc, #296]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 030c 	and.w	r3, r3, #12
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00b      	beq.n	80017ce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017b6:	4b47      	ldr	r3, [pc, #284]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80017be:	2b08      	cmp	r3, #8
 80017c0:	d11c      	bne.n	80017fc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017c2:	4b44      	ldr	r3, [pc, #272]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d116      	bne.n	80017fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ce:	4b41      	ldr	r3, [pc, #260]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d005      	beq.n	80017e6 <HAL_RCC_OscConfig+0x152>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d001      	beq.n	80017e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e1c7      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e6:	4b3b      	ldr	r3, [pc, #236]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	4937      	ldr	r1, [pc, #220]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fa:	e03a      	b.n	8001872 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d020      	beq.n	8001846 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001804:	4b34      	ldr	r3, [pc, #208]	@ (80018d8 <HAL_RCC_OscConfig+0x244>)
 8001806:	2201      	movs	r2, #1
 8001808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180a:	f7ff fc9b 	bl	8001144 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001812:	f7ff fc97 	bl	8001144 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e1a8      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001824:	4b2b      	ldr	r3, [pc, #172]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0f0      	beq.n	8001812 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001830:	4b28      	ldr	r3, [pc, #160]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	4925      	ldr	r1, [pc, #148]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 8001840:	4313      	orrs	r3, r2
 8001842:	600b      	str	r3, [r1, #0]
 8001844:	e015      	b.n	8001872 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001846:	4b24      	ldr	r3, [pc, #144]	@ (80018d8 <HAL_RCC_OscConfig+0x244>)
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184c:	f7ff fc7a 	bl	8001144 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001854:	f7ff fc76 	bl	8001144 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e187      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001866:	4b1b      	ldr	r3, [pc, #108]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f0      	bne.n	8001854 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	2b00      	cmp	r3, #0
 800187c:	d036      	beq.n	80018ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d016      	beq.n	80018b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001886:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <HAL_RCC_OscConfig+0x248>)
 8001888:	2201      	movs	r2, #1
 800188a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188c:	f7ff fc5a 	bl	8001144 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001894:	f7ff fc56 	bl	8001144 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e167      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a6:	4b0b      	ldr	r3, [pc, #44]	@ (80018d4 <HAL_RCC_OscConfig+0x240>)
 80018a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0f0      	beq.n	8001894 <HAL_RCC_OscConfig+0x200>
 80018b2:	e01b      	b.n	80018ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018b4:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <HAL_RCC_OscConfig+0x248>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ba:	f7ff fc43 	bl	8001144 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c0:	e00e      	b.n	80018e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c2:	f7ff fc3f 	bl	8001144 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d907      	bls.n	80018e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e150      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
 80018d4:	40023800 	.word	0x40023800
 80018d8:	42470000 	.word	0x42470000
 80018dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e0:	4b88      	ldr	r3, [pc, #544]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 80018e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1ea      	bne.n	80018c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 8097 	beq.w	8001a28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018fa:	2300      	movs	r3, #0
 80018fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018fe:	4b81      	ldr	r3, [pc, #516]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10f      	bne.n	800192a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	4b7d      	ldr	r3, [pc, #500]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	4a7c      	ldr	r2, [pc, #496]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001918:	6413      	str	r3, [r2, #64]	@ 0x40
 800191a:	4b7a      	ldr	r3, [pc, #488]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001926:	2301      	movs	r3, #1
 8001928:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192a:	4b77      	ldr	r3, [pc, #476]	@ (8001b08 <HAL_RCC_OscConfig+0x474>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001932:	2b00      	cmp	r3, #0
 8001934:	d118      	bne.n	8001968 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001936:	4b74      	ldr	r3, [pc, #464]	@ (8001b08 <HAL_RCC_OscConfig+0x474>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a73      	ldr	r2, [pc, #460]	@ (8001b08 <HAL_RCC_OscConfig+0x474>)
 800193c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001942:	f7ff fbff 	bl	8001144 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800194a:	f7ff fbfb 	bl	8001144 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e10c      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195c:	4b6a      	ldr	r3, [pc, #424]	@ (8001b08 <HAL_RCC_OscConfig+0x474>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0f0      	beq.n	800194a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d106      	bne.n	800197e <HAL_RCC_OscConfig+0x2ea>
 8001970:	4b64      	ldr	r3, [pc, #400]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001974:	4a63      	ldr	r2, [pc, #396]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	6713      	str	r3, [r2, #112]	@ 0x70
 800197c:	e01c      	b.n	80019b8 <HAL_RCC_OscConfig+0x324>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2b05      	cmp	r3, #5
 8001984:	d10c      	bne.n	80019a0 <HAL_RCC_OscConfig+0x30c>
 8001986:	4b5f      	ldr	r3, [pc, #380]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800198a:	4a5e      	ldr	r2, [pc, #376]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 800198c:	f043 0304 	orr.w	r3, r3, #4
 8001990:	6713      	str	r3, [r2, #112]	@ 0x70
 8001992:	4b5c      	ldr	r3, [pc, #368]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001996:	4a5b      	ldr	r2, [pc, #364]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6713      	str	r3, [r2, #112]	@ 0x70
 800199e:	e00b      	b.n	80019b8 <HAL_RCC_OscConfig+0x324>
 80019a0:	4b58      	ldr	r3, [pc, #352]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 80019a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019a4:	4a57      	ldr	r2, [pc, #348]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 80019a6:	f023 0301 	bic.w	r3, r3, #1
 80019aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80019ac:	4b55      	ldr	r3, [pc, #340]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 80019ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019b0:	4a54      	ldr	r2, [pc, #336]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 80019b2:	f023 0304 	bic.w	r3, r3, #4
 80019b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d015      	beq.n	80019ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c0:	f7ff fbc0 	bl	8001144 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c6:	e00a      	b.n	80019de <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c8:	f7ff fbbc 	bl	8001144 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e0cb      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019de:	4b49      	ldr	r3, [pc, #292]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 80019e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0ee      	beq.n	80019c8 <HAL_RCC_OscConfig+0x334>
 80019ea:	e014      	b.n	8001a16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ec:	f7ff fbaa 	bl	8001144 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f2:	e00a      	b.n	8001a0a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f4:	f7ff fba6 	bl	8001144 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e0b5      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0a:	4b3e      	ldr	r3, [pc, #248]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1ee      	bne.n	80019f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a16:	7dfb      	ldrb	r3, [r7, #23]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d105      	bne.n	8001a28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a1c:	4b39      	ldr	r3, [pc, #228]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a20:	4a38      	ldr	r2, [pc, #224]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001a22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a26:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 80a1 	beq.w	8001b74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a32:	4b34      	ldr	r3, [pc, #208]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 030c 	and.w	r3, r3, #12
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d05c      	beq.n	8001af8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d141      	bne.n	8001aca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a46:	4b31      	ldr	r3, [pc, #196]	@ (8001b0c <HAL_RCC_OscConfig+0x478>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fb7a 	bl	8001144 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a54:	f7ff fb76 	bl	8001144 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e087      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a66:	4b27      	ldr	r3, [pc, #156]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69da      	ldr	r2, [r3, #28]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a80:	019b      	lsls	r3, r3, #6
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a88:	085b      	lsrs	r3, r3, #1
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	041b      	lsls	r3, r3, #16
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a94:	061b      	lsls	r3, r3, #24
 8001a96:	491b      	ldr	r1, [pc, #108]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b0c <HAL_RCC_OscConfig+0x478>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa2:	f7ff fb4f 	bl	8001144 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aaa:	f7ff fb4b 	bl	8001144 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e05c      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001abc:	4b11      	ldr	r3, [pc, #68]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0f0      	beq.n	8001aaa <HAL_RCC_OscConfig+0x416>
 8001ac8:	e054      	b.n	8001b74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aca:	4b10      	ldr	r3, [pc, #64]	@ (8001b0c <HAL_RCC_OscConfig+0x478>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad0:	f7ff fb38 	bl	8001144 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad8:	f7ff fb34 	bl	8001144 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e045      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aea:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <HAL_RCC_OscConfig+0x470>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x444>
 8001af6:	e03d      	b.n	8001b74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d107      	bne.n	8001b10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e038      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
 8001b04:	40023800 	.word	0x40023800
 8001b08:	40007000 	.word	0x40007000
 8001b0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b10:	4b1b      	ldr	r3, [pc, #108]	@ (8001b80 <HAL_RCC_OscConfig+0x4ec>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d028      	beq.n	8001b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d121      	bne.n	8001b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d11a      	bne.n	8001b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b40:	4013      	ands	r3, r2
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d111      	bne.n	8001b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b56:	085b      	lsrs	r3, r3, #1
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d107      	bne.n	8001b70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d001      	beq.n	8001b74 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800

08001b84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0cc      	b.n	8001d32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b98:	4b68      	ldr	r3, [pc, #416]	@ (8001d3c <HAL_RCC_ClockConfig+0x1b8>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d90c      	bls.n	8001bc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba6:	4b65      	ldr	r3, [pc, #404]	@ (8001d3c <HAL_RCC_ClockConfig+0x1b8>)
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bae:	4b63      	ldr	r3, [pc, #396]	@ (8001d3c <HAL_RCC_ClockConfig+0x1b8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d001      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e0b8      	b.n	8001d32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d020      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d005      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bd8:	4b59      	ldr	r3, [pc, #356]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	4a58      	ldr	r2, [pc, #352]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001be2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0308 	and.w	r3, r3, #8
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d005      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bf0:	4b53      	ldr	r3, [pc, #332]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	4a52      	ldr	r2, [pc, #328]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001bfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bfc:	4b50      	ldr	r3, [pc, #320]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	494d      	ldr	r1, [pc, #308]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d044      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d107      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c22:	4b47      	ldr	r3, [pc, #284]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d119      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e07f      	b.n	8001d32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d003      	beq.n	8001c42 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	d107      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c42:	4b3f      	ldr	r3, [pc, #252]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d109      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e06f      	b.n	8001d32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c52:	4b3b      	ldr	r3, [pc, #236]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e067      	b.n	8001d32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c62:	4b37      	ldr	r3, [pc, #220]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f023 0203 	bic.w	r2, r3, #3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	4934      	ldr	r1, [pc, #208]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c74:	f7ff fa66 	bl	8001144 <HAL_GetTick>
 8001c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7a:	e00a      	b.n	8001c92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c7c:	f7ff fa62 	bl	8001144 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e04f      	b.n	8001d32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c92:	4b2b      	ldr	r3, [pc, #172]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 020c 	and.w	r2, r3, #12
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d1eb      	bne.n	8001c7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca4:	4b25      	ldr	r3, [pc, #148]	@ (8001d3c <HAL_RCC_ClockConfig+0x1b8>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d20c      	bcs.n	8001ccc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb2:	4b22      	ldr	r3, [pc, #136]	@ (8001d3c <HAL_RCC_ClockConfig+0x1b8>)
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cba:	4b20      	ldr	r3, [pc, #128]	@ (8001d3c <HAL_RCC_ClockConfig+0x1b8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d001      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e032      	b.n	8001d32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d008      	beq.n	8001cea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd8:	4b19      	ldr	r3, [pc, #100]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	4916      	ldr	r1, [pc, #88]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d009      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cf6:	4b12      	ldr	r3, [pc, #72]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	490e      	ldr	r1, [pc, #56]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d0a:	f000 f821 	bl	8001d50 <HAL_RCC_GetSysClockFreq>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	4b0b      	ldr	r3, [pc, #44]	@ (8001d40 <HAL_RCC_ClockConfig+0x1bc>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	091b      	lsrs	r3, r3, #4
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	490a      	ldr	r1, [pc, #40]	@ (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1c:	5ccb      	ldrb	r3, [r1, r3]
 8001d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d22:	4a09      	ldr	r2, [pc, #36]	@ (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001d26:	4b09      	ldr	r3, [pc, #36]	@ (8001d4c <HAL_RCC_ClockConfig+0x1c8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff f9c6 	bl	80010bc <HAL_InitTick>

  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023c00 	.word	0x40023c00
 8001d40:	40023800 	.word	0x40023800
 8001d44:	0800298c 	.word	0x0800298c
 8001d48:	20000000 	.word	0x20000000
 8001d4c:	20000004 	.word	0x20000004

08001d50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d54:	b094      	sub	sp, #80	@ 0x50
 8001d56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d68:	4b79      	ldr	r3, [pc, #484]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 030c 	and.w	r3, r3, #12
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d00d      	beq.n	8001d90 <HAL_RCC_GetSysClockFreq+0x40>
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	f200 80e1 	bhi.w	8001f3c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d002      	beq.n	8001d84 <HAL_RCC_GetSysClockFreq+0x34>
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d003      	beq.n	8001d8a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d82:	e0db      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d84:	4b73      	ldr	r3, [pc, #460]	@ (8001f54 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d88:	e0db      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d8a:	4b73      	ldr	r3, [pc, #460]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d8e:	e0d8      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d90:	4b6f      	ldr	r3, [pc, #444]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d98:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d9a:	4b6d      	ldr	r3, [pc, #436]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d063      	beq.n	8001e6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001da6:	4b6a      	ldr	r3, [pc, #424]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x200>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	099b      	lsrs	r3, r3, #6
 8001dac:	2200      	movs	r2, #0
 8001dae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001db0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001db8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001dba:	2300      	movs	r3, #0
 8001dbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001dbe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001dc2:	4622      	mov	r2, r4
 8001dc4:	462b      	mov	r3, r5
 8001dc6:	f04f 0000 	mov.w	r0, #0
 8001dca:	f04f 0100 	mov.w	r1, #0
 8001dce:	0159      	lsls	r1, r3, #5
 8001dd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dd4:	0150      	lsls	r0, r2, #5
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4621      	mov	r1, r4
 8001ddc:	1a51      	subs	r1, r2, r1
 8001dde:	6139      	str	r1, [r7, #16]
 8001de0:	4629      	mov	r1, r5
 8001de2:	eb63 0301 	sbc.w	r3, r3, r1
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	f04f 0300 	mov.w	r3, #0
 8001df0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001df4:	4659      	mov	r1, fp
 8001df6:	018b      	lsls	r3, r1, #6
 8001df8:	4651      	mov	r1, sl
 8001dfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dfe:	4651      	mov	r1, sl
 8001e00:	018a      	lsls	r2, r1, #6
 8001e02:	4651      	mov	r1, sl
 8001e04:	ebb2 0801 	subs.w	r8, r2, r1
 8001e08:	4659      	mov	r1, fp
 8001e0a:	eb63 0901 	sbc.w	r9, r3, r1
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e22:	4690      	mov	r8, r2
 8001e24:	4699      	mov	r9, r3
 8001e26:	4623      	mov	r3, r4
 8001e28:	eb18 0303 	adds.w	r3, r8, r3
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	462b      	mov	r3, r5
 8001e30:	eb49 0303 	adc.w	r3, r9, r3
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e42:	4629      	mov	r1, r5
 8001e44:	024b      	lsls	r3, r1, #9
 8001e46:	4621      	mov	r1, r4
 8001e48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e4c:	4621      	mov	r1, r4
 8001e4e:	024a      	lsls	r2, r1, #9
 8001e50:	4610      	mov	r0, r2
 8001e52:	4619      	mov	r1, r3
 8001e54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e56:	2200      	movs	r2, #0
 8001e58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e60:	f7fe f9b2 	bl	80001c8 <__aeabi_uldivmod>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4613      	mov	r3, r2
 8001e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e6c:	e058      	b.n	8001f20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e6e:	4b38      	ldr	r3, [pc, #224]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	099b      	lsrs	r3, r3, #6
 8001e74:	2200      	movs	r2, #0
 8001e76:	4618      	mov	r0, r3
 8001e78:	4611      	mov	r1, r2
 8001e7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e7e:	623b      	str	r3, [r7, #32]
 8001e80:	2300      	movs	r3, #0
 8001e82:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e88:	4642      	mov	r2, r8
 8001e8a:	464b      	mov	r3, r9
 8001e8c:	f04f 0000 	mov.w	r0, #0
 8001e90:	f04f 0100 	mov.w	r1, #0
 8001e94:	0159      	lsls	r1, r3, #5
 8001e96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e9a:	0150      	lsls	r0, r2, #5
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4641      	mov	r1, r8
 8001ea2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ea6:	4649      	mov	r1, r9
 8001ea8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	f04f 0300 	mov.w	r3, #0
 8001eb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001eb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ebc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ec0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ec4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	00eb      	lsls	r3, r5, #3
 8001ed2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ed6:	00e2      	lsls	r2, r4, #3
 8001ed8:	4614      	mov	r4, r2
 8001eda:	461d      	mov	r5, r3
 8001edc:	4643      	mov	r3, r8
 8001ede:	18e3      	adds	r3, r4, r3
 8001ee0:	603b      	str	r3, [r7, #0]
 8001ee2:	464b      	mov	r3, r9
 8001ee4:	eb45 0303 	adc.w	r3, r5, r3
 8001ee8:	607b      	str	r3, [r7, #4]
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	f04f 0300 	mov.w	r3, #0
 8001ef2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ef6:	4629      	mov	r1, r5
 8001ef8:	028b      	lsls	r3, r1, #10
 8001efa:	4621      	mov	r1, r4
 8001efc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f00:	4621      	mov	r1, r4
 8001f02:	028a      	lsls	r2, r1, #10
 8001f04:	4610      	mov	r0, r2
 8001f06:	4619      	mov	r1, r3
 8001f08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	61bb      	str	r3, [r7, #24]
 8001f0e:	61fa      	str	r2, [r7, #28]
 8001f10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f14:	f7fe f958 	bl	80001c8 <__aeabi_uldivmod>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f20:	4b0b      	ldr	r3, [pc, #44]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	0c1b      	lsrs	r3, r3, #16
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001f30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f3a:	e002      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f3c:	4b05      	ldr	r3, [pc, #20]	@ (8001f54 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f3e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3750      	adds	r7, #80	@ 0x50
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f4e:	bf00      	nop
 8001f50:	40023800 	.word	0x40023800
 8001f54:	00f42400 	.word	0x00f42400
 8001f58:	007a1200 	.word	0x007a1200

08001f5c <std>:
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	b510      	push	{r4, lr}
 8001f60:	4604      	mov	r4, r0
 8001f62:	e9c0 3300 	strd	r3, r3, [r0]
 8001f66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001f6a:	6083      	str	r3, [r0, #8]
 8001f6c:	8181      	strh	r1, [r0, #12]
 8001f6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8001f70:	81c2      	strh	r2, [r0, #14]
 8001f72:	6183      	str	r3, [r0, #24]
 8001f74:	4619      	mov	r1, r3
 8001f76:	2208      	movs	r2, #8
 8001f78:	305c      	adds	r0, #92	@ 0x5c
 8001f7a:	f000 f9e7 	bl	800234c <memset>
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb4 <std+0x58>)
 8001f80:	6263      	str	r3, [r4, #36]	@ 0x24
 8001f82:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb8 <std+0x5c>)
 8001f84:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001f86:	4b0d      	ldr	r3, [pc, #52]	@ (8001fbc <std+0x60>)
 8001f88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc0 <std+0x64>)
 8001f8c:	6323      	str	r3, [r4, #48]	@ 0x30
 8001f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc4 <std+0x68>)
 8001f90:	6224      	str	r4, [r4, #32]
 8001f92:	429c      	cmp	r4, r3
 8001f94:	d006      	beq.n	8001fa4 <std+0x48>
 8001f96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001f9a:	4294      	cmp	r4, r2
 8001f9c:	d002      	beq.n	8001fa4 <std+0x48>
 8001f9e:	33d0      	adds	r3, #208	@ 0xd0
 8001fa0:	429c      	cmp	r4, r3
 8001fa2:	d105      	bne.n	8001fb0 <std+0x54>
 8001fa4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fac:	f000 ba46 	b.w	800243c <__retarget_lock_init_recursive>
 8001fb0:	bd10      	pop	{r4, pc}
 8001fb2:	bf00      	nop
 8001fb4:	0800219d 	.word	0x0800219d
 8001fb8:	080021bf 	.word	0x080021bf
 8001fbc:	080021f7 	.word	0x080021f7
 8001fc0:	0800221b 	.word	0x0800221b
 8001fc4:	2000008c 	.word	0x2000008c

08001fc8 <stdio_exit_handler>:
 8001fc8:	4a02      	ldr	r2, [pc, #8]	@ (8001fd4 <stdio_exit_handler+0xc>)
 8001fca:	4903      	ldr	r1, [pc, #12]	@ (8001fd8 <stdio_exit_handler+0x10>)
 8001fcc:	4803      	ldr	r0, [pc, #12]	@ (8001fdc <stdio_exit_handler+0x14>)
 8001fce:	f000 b869 	b.w	80020a4 <_fwalk_sglue>
 8001fd2:	bf00      	nop
 8001fd4:	2000000c 	.word	0x2000000c
 8001fd8:	0800273d 	.word	0x0800273d
 8001fdc:	2000001c 	.word	0x2000001c

08001fe0 <cleanup_stdio>:
 8001fe0:	6841      	ldr	r1, [r0, #4]
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8002014 <cleanup_stdio+0x34>)
 8001fe4:	4299      	cmp	r1, r3
 8001fe6:	b510      	push	{r4, lr}
 8001fe8:	4604      	mov	r4, r0
 8001fea:	d001      	beq.n	8001ff0 <cleanup_stdio+0x10>
 8001fec:	f000 fba6 	bl	800273c <_fflush_r>
 8001ff0:	68a1      	ldr	r1, [r4, #8]
 8001ff2:	4b09      	ldr	r3, [pc, #36]	@ (8002018 <cleanup_stdio+0x38>)
 8001ff4:	4299      	cmp	r1, r3
 8001ff6:	d002      	beq.n	8001ffe <cleanup_stdio+0x1e>
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	f000 fb9f 	bl	800273c <_fflush_r>
 8001ffe:	68e1      	ldr	r1, [r4, #12]
 8002000:	4b06      	ldr	r3, [pc, #24]	@ (800201c <cleanup_stdio+0x3c>)
 8002002:	4299      	cmp	r1, r3
 8002004:	d004      	beq.n	8002010 <cleanup_stdio+0x30>
 8002006:	4620      	mov	r0, r4
 8002008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800200c:	f000 bb96 	b.w	800273c <_fflush_r>
 8002010:	bd10      	pop	{r4, pc}
 8002012:	bf00      	nop
 8002014:	2000008c 	.word	0x2000008c
 8002018:	200000f4 	.word	0x200000f4
 800201c:	2000015c 	.word	0x2000015c

08002020 <global_stdio_init.part.0>:
 8002020:	b510      	push	{r4, lr}
 8002022:	4b0b      	ldr	r3, [pc, #44]	@ (8002050 <global_stdio_init.part.0+0x30>)
 8002024:	4c0b      	ldr	r4, [pc, #44]	@ (8002054 <global_stdio_init.part.0+0x34>)
 8002026:	4a0c      	ldr	r2, [pc, #48]	@ (8002058 <global_stdio_init.part.0+0x38>)
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	4620      	mov	r0, r4
 800202c:	2200      	movs	r2, #0
 800202e:	2104      	movs	r1, #4
 8002030:	f7ff ff94 	bl	8001f5c <std>
 8002034:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002038:	2201      	movs	r2, #1
 800203a:	2109      	movs	r1, #9
 800203c:	f7ff ff8e 	bl	8001f5c <std>
 8002040:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002044:	2202      	movs	r2, #2
 8002046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800204a:	2112      	movs	r1, #18
 800204c:	f7ff bf86 	b.w	8001f5c <std>
 8002050:	200001c4 	.word	0x200001c4
 8002054:	2000008c 	.word	0x2000008c
 8002058:	08001fc9 	.word	0x08001fc9

0800205c <__sfp_lock_acquire>:
 800205c:	4801      	ldr	r0, [pc, #4]	@ (8002064 <__sfp_lock_acquire+0x8>)
 800205e:	f000 b9ee 	b.w	800243e <__retarget_lock_acquire_recursive>
 8002062:	bf00      	nop
 8002064:	200001cd 	.word	0x200001cd

08002068 <__sfp_lock_release>:
 8002068:	4801      	ldr	r0, [pc, #4]	@ (8002070 <__sfp_lock_release+0x8>)
 800206a:	f000 b9e9 	b.w	8002440 <__retarget_lock_release_recursive>
 800206e:	bf00      	nop
 8002070:	200001cd 	.word	0x200001cd

08002074 <__sinit>:
 8002074:	b510      	push	{r4, lr}
 8002076:	4604      	mov	r4, r0
 8002078:	f7ff fff0 	bl	800205c <__sfp_lock_acquire>
 800207c:	6a23      	ldr	r3, [r4, #32]
 800207e:	b11b      	cbz	r3, 8002088 <__sinit+0x14>
 8002080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002084:	f7ff bff0 	b.w	8002068 <__sfp_lock_release>
 8002088:	4b04      	ldr	r3, [pc, #16]	@ (800209c <__sinit+0x28>)
 800208a:	6223      	str	r3, [r4, #32]
 800208c:	4b04      	ldr	r3, [pc, #16]	@ (80020a0 <__sinit+0x2c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1f5      	bne.n	8002080 <__sinit+0xc>
 8002094:	f7ff ffc4 	bl	8002020 <global_stdio_init.part.0>
 8002098:	e7f2      	b.n	8002080 <__sinit+0xc>
 800209a:	bf00      	nop
 800209c:	08001fe1 	.word	0x08001fe1
 80020a0:	200001c4 	.word	0x200001c4

080020a4 <_fwalk_sglue>:
 80020a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80020a8:	4607      	mov	r7, r0
 80020aa:	4688      	mov	r8, r1
 80020ac:	4614      	mov	r4, r2
 80020ae:	2600      	movs	r6, #0
 80020b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80020b4:	f1b9 0901 	subs.w	r9, r9, #1
 80020b8:	d505      	bpl.n	80020c6 <_fwalk_sglue+0x22>
 80020ba:	6824      	ldr	r4, [r4, #0]
 80020bc:	2c00      	cmp	r4, #0
 80020be:	d1f7      	bne.n	80020b0 <_fwalk_sglue+0xc>
 80020c0:	4630      	mov	r0, r6
 80020c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80020c6:	89ab      	ldrh	r3, [r5, #12]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d907      	bls.n	80020dc <_fwalk_sglue+0x38>
 80020cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80020d0:	3301      	adds	r3, #1
 80020d2:	d003      	beq.n	80020dc <_fwalk_sglue+0x38>
 80020d4:	4629      	mov	r1, r5
 80020d6:	4638      	mov	r0, r7
 80020d8:	47c0      	blx	r8
 80020da:	4306      	orrs	r6, r0
 80020dc:	3568      	adds	r5, #104	@ 0x68
 80020de:	e7e9      	b.n	80020b4 <_fwalk_sglue+0x10>

080020e0 <_puts_r>:
 80020e0:	6a03      	ldr	r3, [r0, #32]
 80020e2:	b570      	push	{r4, r5, r6, lr}
 80020e4:	6884      	ldr	r4, [r0, #8]
 80020e6:	4605      	mov	r5, r0
 80020e8:	460e      	mov	r6, r1
 80020ea:	b90b      	cbnz	r3, 80020f0 <_puts_r+0x10>
 80020ec:	f7ff ffc2 	bl	8002074 <__sinit>
 80020f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80020f2:	07db      	lsls	r3, r3, #31
 80020f4:	d405      	bmi.n	8002102 <_puts_r+0x22>
 80020f6:	89a3      	ldrh	r3, [r4, #12]
 80020f8:	0598      	lsls	r0, r3, #22
 80020fa:	d402      	bmi.n	8002102 <_puts_r+0x22>
 80020fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80020fe:	f000 f99e 	bl	800243e <__retarget_lock_acquire_recursive>
 8002102:	89a3      	ldrh	r3, [r4, #12]
 8002104:	0719      	lsls	r1, r3, #28
 8002106:	d502      	bpl.n	800210e <_puts_r+0x2e>
 8002108:	6923      	ldr	r3, [r4, #16]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d135      	bne.n	800217a <_puts_r+0x9a>
 800210e:	4621      	mov	r1, r4
 8002110:	4628      	mov	r0, r5
 8002112:	f000 f8c5 	bl	80022a0 <__swsetup_r>
 8002116:	b380      	cbz	r0, 800217a <_puts_r+0x9a>
 8002118:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800211c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800211e:	07da      	lsls	r2, r3, #31
 8002120:	d405      	bmi.n	800212e <_puts_r+0x4e>
 8002122:	89a3      	ldrh	r3, [r4, #12]
 8002124:	059b      	lsls	r3, r3, #22
 8002126:	d402      	bmi.n	800212e <_puts_r+0x4e>
 8002128:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800212a:	f000 f989 	bl	8002440 <__retarget_lock_release_recursive>
 800212e:	4628      	mov	r0, r5
 8002130:	bd70      	pop	{r4, r5, r6, pc}
 8002132:	2b00      	cmp	r3, #0
 8002134:	da04      	bge.n	8002140 <_puts_r+0x60>
 8002136:	69a2      	ldr	r2, [r4, #24]
 8002138:	429a      	cmp	r2, r3
 800213a:	dc17      	bgt.n	800216c <_puts_r+0x8c>
 800213c:	290a      	cmp	r1, #10
 800213e:	d015      	beq.n	800216c <_puts_r+0x8c>
 8002140:	6823      	ldr	r3, [r4, #0]
 8002142:	1c5a      	adds	r2, r3, #1
 8002144:	6022      	str	r2, [r4, #0]
 8002146:	7019      	strb	r1, [r3, #0]
 8002148:	68a3      	ldr	r3, [r4, #8]
 800214a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800214e:	3b01      	subs	r3, #1
 8002150:	60a3      	str	r3, [r4, #8]
 8002152:	2900      	cmp	r1, #0
 8002154:	d1ed      	bne.n	8002132 <_puts_r+0x52>
 8002156:	2b00      	cmp	r3, #0
 8002158:	da11      	bge.n	800217e <_puts_r+0x9e>
 800215a:	4622      	mov	r2, r4
 800215c:	210a      	movs	r1, #10
 800215e:	4628      	mov	r0, r5
 8002160:	f000 f85f 	bl	8002222 <__swbuf_r>
 8002164:	3001      	adds	r0, #1
 8002166:	d0d7      	beq.n	8002118 <_puts_r+0x38>
 8002168:	250a      	movs	r5, #10
 800216a:	e7d7      	b.n	800211c <_puts_r+0x3c>
 800216c:	4622      	mov	r2, r4
 800216e:	4628      	mov	r0, r5
 8002170:	f000 f857 	bl	8002222 <__swbuf_r>
 8002174:	3001      	adds	r0, #1
 8002176:	d1e7      	bne.n	8002148 <_puts_r+0x68>
 8002178:	e7ce      	b.n	8002118 <_puts_r+0x38>
 800217a:	3e01      	subs	r6, #1
 800217c:	e7e4      	b.n	8002148 <_puts_r+0x68>
 800217e:	6823      	ldr	r3, [r4, #0]
 8002180:	1c5a      	adds	r2, r3, #1
 8002182:	6022      	str	r2, [r4, #0]
 8002184:	220a      	movs	r2, #10
 8002186:	701a      	strb	r2, [r3, #0]
 8002188:	e7ee      	b.n	8002168 <_puts_r+0x88>
	...

0800218c <puts>:
 800218c:	4b02      	ldr	r3, [pc, #8]	@ (8002198 <puts+0xc>)
 800218e:	4601      	mov	r1, r0
 8002190:	6818      	ldr	r0, [r3, #0]
 8002192:	f7ff bfa5 	b.w	80020e0 <_puts_r>
 8002196:	bf00      	nop
 8002198:	20000018 	.word	0x20000018

0800219c <__sread>:
 800219c:	b510      	push	{r4, lr}
 800219e:	460c      	mov	r4, r1
 80021a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021a4:	f000 f8fc 	bl	80023a0 <_read_r>
 80021a8:	2800      	cmp	r0, #0
 80021aa:	bfab      	itete	ge
 80021ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80021ae:	89a3      	ldrhlt	r3, [r4, #12]
 80021b0:	181b      	addge	r3, r3, r0
 80021b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80021b6:	bfac      	ite	ge
 80021b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80021ba:	81a3      	strhlt	r3, [r4, #12]
 80021bc:	bd10      	pop	{r4, pc}

080021be <__swrite>:
 80021be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021c2:	461f      	mov	r7, r3
 80021c4:	898b      	ldrh	r3, [r1, #12]
 80021c6:	05db      	lsls	r3, r3, #23
 80021c8:	4605      	mov	r5, r0
 80021ca:	460c      	mov	r4, r1
 80021cc:	4616      	mov	r6, r2
 80021ce:	d505      	bpl.n	80021dc <__swrite+0x1e>
 80021d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021d4:	2302      	movs	r3, #2
 80021d6:	2200      	movs	r2, #0
 80021d8:	f000 f8d0 	bl	800237c <_lseek_r>
 80021dc:	89a3      	ldrh	r3, [r4, #12]
 80021de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80021e6:	81a3      	strh	r3, [r4, #12]
 80021e8:	4632      	mov	r2, r6
 80021ea:	463b      	mov	r3, r7
 80021ec:	4628      	mov	r0, r5
 80021ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80021f2:	f000 b8e7 	b.w	80023c4 <_write_r>

080021f6 <__sseek>:
 80021f6:	b510      	push	{r4, lr}
 80021f8:	460c      	mov	r4, r1
 80021fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021fe:	f000 f8bd 	bl	800237c <_lseek_r>
 8002202:	1c43      	adds	r3, r0, #1
 8002204:	89a3      	ldrh	r3, [r4, #12]
 8002206:	bf15      	itete	ne
 8002208:	6560      	strne	r0, [r4, #84]	@ 0x54
 800220a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800220e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002212:	81a3      	strheq	r3, [r4, #12]
 8002214:	bf18      	it	ne
 8002216:	81a3      	strhne	r3, [r4, #12]
 8002218:	bd10      	pop	{r4, pc}

0800221a <__sclose>:
 800221a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800221e:	f000 b89d 	b.w	800235c <_close_r>

08002222 <__swbuf_r>:
 8002222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002224:	460e      	mov	r6, r1
 8002226:	4614      	mov	r4, r2
 8002228:	4605      	mov	r5, r0
 800222a:	b118      	cbz	r0, 8002234 <__swbuf_r+0x12>
 800222c:	6a03      	ldr	r3, [r0, #32]
 800222e:	b90b      	cbnz	r3, 8002234 <__swbuf_r+0x12>
 8002230:	f7ff ff20 	bl	8002074 <__sinit>
 8002234:	69a3      	ldr	r3, [r4, #24]
 8002236:	60a3      	str	r3, [r4, #8]
 8002238:	89a3      	ldrh	r3, [r4, #12]
 800223a:	071a      	lsls	r2, r3, #28
 800223c:	d501      	bpl.n	8002242 <__swbuf_r+0x20>
 800223e:	6923      	ldr	r3, [r4, #16]
 8002240:	b943      	cbnz	r3, 8002254 <__swbuf_r+0x32>
 8002242:	4621      	mov	r1, r4
 8002244:	4628      	mov	r0, r5
 8002246:	f000 f82b 	bl	80022a0 <__swsetup_r>
 800224a:	b118      	cbz	r0, 8002254 <__swbuf_r+0x32>
 800224c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8002250:	4638      	mov	r0, r7
 8002252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002254:	6823      	ldr	r3, [r4, #0]
 8002256:	6922      	ldr	r2, [r4, #16]
 8002258:	1a98      	subs	r0, r3, r2
 800225a:	6963      	ldr	r3, [r4, #20]
 800225c:	b2f6      	uxtb	r6, r6
 800225e:	4283      	cmp	r3, r0
 8002260:	4637      	mov	r7, r6
 8002262:	dc05      	bgt.n	8002270 <__swbuf_r+0x4e>
 8002264:	4621      	mov	r1, r4
 8002266:	4628      	mov	r0, r5
 8002268:	f000 fa68 	bl	800273c <_fflush_r>
 800226c:	2800      	cmp	r0, #0
 800226e:	d1ed      	bne.n	800224c <__swbuf_r+0x2a>
 8002270:	68a3      	ldr	r3, [r4, #8]
 8002272:	3b01      	subs	r3, #1
 8002274:	60a3      	str	r3, [r4, #8]
 8002276:	6823      	ldr	r3, [r4, #0]
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	6022      	str	r2, [r4, #0]
 800227c:	701e      	strb	r6, [r3, #0]
 800227e:	6962      	ldr	r2, [r4, #20]
 8002280:	1c43      	adds	r3, r0, #1
 8002282:	429a      	cmp	r2, r3
 8002284:	d004      	beq.n	8002290 <__swbuf_r+0x6e>
 8002286:	89a3      	ldrh	r3, [r4, #12]
 8002288:	07db      	lsls	r3, r3, #31
 800228a:	d5e1      	bpl.n	8002250 <__swbuf_r+0x2e>
 800228c:	2e0a      	cmp	r6, #10
 800228e:	d1df      	bne.n	8002250 <__swbuf_r+0x2e>
 8002290:	4621      	mov	r1, r4
 8002292:	4628      	mov	r0, r5
 8002294:	f000 fa52 	bl	800273c <_fflush_r>
 8002298:	2800      	cmp	r0, #0
 800229a:	d0d9      	beq.n	8002250 <__swbuf_r+0x2e>
 800229c:	e7d6      	b.n	800224c <__swbuf_r+0x2a>
	...

080022a0 <__swsetup_r>:
 80022a0:	b538      	push	{r3, r4, r5, lr}
 80022a2:	4b29      	ldr	r3, [pc, #164]	@ (8002348 <__swsetup_r+0xa8>)
 80022a4:	4605      	mov	r5, r0
 80022a6:	6818      	ldr	r0, [r3, #0]
 80022a8:	460c      	mov	r4, r1
 80022aa:	b118      	cbz	r0, 80022b4 <__swsetup_r+0x14>
 80022ac:	6a03      	ldr	r3, [r0, #32]
 80022ae:	b90b      	cbnz	r3, 80022b4 <__swsetup_r+0x14>
 80022b0:	f7ff fee0 	bl	8002074 <__sinit>
 80022b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022b8:	0719      	lsls	r1, r3, #28
 80022ba:	d422      	bmi.n	8002302 <__swsetup_r+0x62>
 80022bc:	06da      	lsls	r2, r3, #27
 80022be:	d407      	bmi.n	80022d0 <__swsetup_r+0x30>
 80022c0:	2209      	movs	r2, #9
 80022c2:	602a      	str	r2, [r5, #0]
 80022c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022c8:	81a3      	strh	r3, [r4, #12]
 80022ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80022ce:	e033      	b.n	8002338 <__swsetup_r+0x98>
 80022d0:	0758      	lsls	r0, r3, #29
 80022d2:	d512      	bpl.n	80022fa <__swsetup_r+0x5a>
 80022d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80022d6:	b141      	cbz	r1, 80022ea <__swsetup_r+0x4a>
 80022d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80022dc:	4299      	cmp	r1, r3
 80022de:	d002      	beq.n	80022e6 <__swsetup_r+0x46>
 80022e0:	4628      	mov	r0, r5
 80022e2:	f000 f8af 	bl	8002444 <_free_r>
 80022e6:	2300      	movs	r3, #0
 80022e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80022ea:	89a3      	ldrh	r3, [r4, #12]
 80022ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80022f0:	81a3      	strh	r3, [r4, #12]
 80022f2:	2300      	movs	r3, #0
 80022f4:	6063      	str	r3, [r4, #4]
 80022f6:	6923      	ldr	r3, [r4, #16]
 80022f8:	6023      	str	r3, [r4, #0]
 80022fa:	89a3      	ldrh	r3, [r4, #12]
 80022fc:	f043 0308 	orr.w	r3, r3, #8
 8002300:	81a3      	strh	r3, [r4, #12]
 8002302:	6923      	ldr	r3, [r4, #16]
 8002304:	b94b      	cbnz	r3, 800231a <__swsetup_r+0x7a>
 8002306:	89a3      	ldrh	r3, [r4, #12]
 8002308:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800230c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002310:	d003      	beq.n	800231a <__swsetup_r+0x7a>
 8002312:	4621      	mov	r1, r4
 8002314:	4628      	mov	r0, r5
 8002316:	f000 fa5f 	bl	80027d8 <__smakebuf_r>
 800231a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800231e:	f013 0201 	ands.w	r2, r3, #1
 8002322:	d00a      	beq.n	800233a <__swsetup_r+0x9a>
 8002324:	2200      	movs	r2, #0
 8002326:	60a2      	str	r2, [r4, #8]
 8002328:	6962      	ldr	r2, [r4, #20]
 800232a:	4252      	negs	r2, r2
 800232c:	61a2      	str	r2, [r4, #24]
 800232e:	6922      	ldr	r2, [r4, #16]
 8002330:	b942      	cbnz	r2, 8002344 <__swsetup_r+0xa4>
 8002332:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002336:	d1c5      	bne.n	80022c4 <__swsetup_r+0x24>
 8002338:	bd38      	pop	{r3, r4, r5, pc}
 800233a:	0799      	lsls	r1, r3, #30
 800233c:	bf58      	it	pl
 800233e:	6962      	ldrpl	r2, [r4, #20]
 8002340:	60a2      	str	r2, [r4, #8]
 8002342:	e7f4      	b.n	800232e <__swsetup_r+0x8e>
 8002344:	2000      	movs	r0, #0
 8002346:	e7f7      	b.n	8002338 <__swsetup_r+0x98>
 8002348:	20000018 	.word	0x20000018

0800234c <memset>:
 800234c:	4402      	add	r2, r0
 800234e:	4603      	mov	r3, r0
 8002350:	4293      	cmp	r3, r2
 8002352:	d100      	bne.n	8002356 <memset+0xa>
 8002354:	4770      	bx	lr
 8002356:	f803 1b01 	strb.w	r1, [r3], #1
 800235a:	e7f9      	b.n	8002350 <memset+0x4>

0800235c <_close_r>:
 800235c:	b538      	push	{r3, r4, r5, lr}
 800235e:	4d06      	ldr	r5, [pc, #24]	@ (8002378 <_close_r+0x1c>)
 8002360:	2300      	movs	r3, #0
 8002362:	4604      	mov	r4, r0
 8002364:	4608      	mov	r0, r1
 8002366:	602b      	str	r3, [r5, #0]
 8002368:	f7fe fde0 	bl	8000f2c <_close>
 800236c:	1c43      	adds	r3, r0, #1
 800236e:	d102      	bne.n	8002376 <_close_r+0x1a>
 8002370:	682b      	ldr	r3, [r5, #0]
 8002372:	b103      	cbz	r3, 8002376 <_close_r+0x1a>
 8002374:	6023      	str	r3, [r4, #0]
 8002376:	bd38      	pop	{r3, r4, r5, pc}
 8002378:	200001c8 	.word	0x200001c8

0800237c <_lseek_r>:
 800237c:	b538      	push	{r3, r4, r5, lr}
 800237e:	4d07      	ldr	r5, [pc, #28]	@ (800239c <_lseek_r+0x20>)
 8002380:	4604      	mov	r4, r0
 8002382:	4608      	mov	r0, r1
 8002384:	4611      	mov	r1, r2
 8002386:	2200      	movs	r2, #0
 8002388:	602a      	str	r2, [r5, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	f7fe fdf5 	bl	8000f7a <_lseek>
 8002390:	1c43      	adds	r3, r0, #1
 8002392:	d102      	bne.n	800239a <_lseek_r+0x1e>
 8002394:	682b      	ldr	r3, [r5, #0]
 8002396:	b103      	cbz	r3, 800239a <_lseek_r+0x1e>
 8002398:	6023      	str	r3, [r4, #0]
 800239a:	bd38      	pop	{r3, r4, r5, pc}
 800239c:	200001c8 	.word	0x200001c8

080023a0 <_read_r>:
 80023a0:	b538      	push	{r3, r4, r5, lr}
 80023a2:	4d07      	ldr	r5, [pc, #28]	@ (80023c0 <_read_r+0x20>)
 80023a4:	4604      	mov	r4, r0
 80023a6:	4608      	mov	r0, r1
 80023a8:	4611      	mov	r1, r2
 80023aa:	2200      	movs	r2, #0
 80023ac:	602a      	str	r2, [r5, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	f7fe fd83 	bl	8000eba <_read>
 80023b4:	1c43      	adds	r3, r0, #1
 80023b6:	d102      	bne.n	80023be <_read_r+0x1e>
 80023b8:	682b      	ldr	r3, [r5, #0]
 80023ba:	b103      	cbz	r3, 80023be <_read_r+0x1e>
 80023bc:	6023      	str	r3, [r4, #0]
 80023be:	bd38      	pop	{r3, r4, r5, pc}
 80023c0:	200001c8 	.word	0x200001c8

080023c4 <_write_r>:
 80023c4:	b538      	push	{r3, r4, r5, lr}
 80023c6:	4d07      	ldr	r5, [pc, #28]	@ (80023e4 <_write_r+0x20>)
 80023c8:	4604      	mov	r4, r0
 80023ca:	4608      	mov	r0, r1
 80023cc:	4611      	mov	r1, r2
 80023ce:	2200      	movs	r2, #0
 80023d0:	602a      	str	r2, [r5, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	f7fe fd8e 	bl	8000ef4 <_write>
 80023d8:	1c43      	adds	r3, r0, #1
 80023da:	d102      	bne.n	80023e2 <_write_r+0x1e>
 80023dc:	682b      	ldr	r3, [r5, #0]
 80023de:	b103      	cbz	r3, 80023e2 <_write_r+0x1e>
 80023e0:	6023      	str	r3, [r4, #0]
 80023e2:	bd38      	pop	{r3, r4, r5, pc}
 80023e4:	200001c8 	.word	0x200001c8

080023e8 <__errno>:
 80023e8:	4b01      	ldr	r3, [pc, #4]	@ (80023f0 <__errno+0x8>)
 80023ea:	6818      	ldr	r0, [r3, #0]
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	20000018 	.word	0x20000018

080023f4 <__libc_init_array>:
 80023f4:	b570      	push	{r4, r5, r6, lr}
 80023f6:	4d0d      	ldr	r5, [pc, #52]	@ (800242c <__libc_init_array+0x38>)
 80023f8:	4c0d      	ldr	r4, [pc, #52]	@ (8002430 <__libc_init_array+0x3c>)
 80023fa:	1b64      	subs	r4, r4, r5
 80023fc:	10a4      	asrs	r4, r4, #2
 80023fe:	2600      	movs	r6, #0
 8002400:	42a6      	cmp	r6, r4
 8002402:	d109      	bne.n	8002418 <__libc_init_array+0x24>
 8002404:	4d0b      	ldr	r5, [pc, #44]	@ (8002434 <__libc_init_array+0x40>)
 8002406:	4c0c      	ldr	r4, [pc, #48]	@ (8002438 <__libc_init_array+0x44>)
 8002408:	f000 fa54 	bl	80028b4 <_init>
 800240c:	1b64      	subs	r4, r4, r5
 800240e:	10a4      	asrs	r4, r4, #2
 8002410:	2600      	movs	r6, #0
 8002412:	42a6      	cmp	r6, r4
 8002414:	d105      	bne.n	8002422 <__libc_init_array+0x2e>
 8002416:	bd70      	pop	{r4, r5, r6, pc}
 8002418:	f855 3b04 	ldr.w	r3, [r5], #4
 800241c:	4798      	blx	r3
 800241e:	3601      	adds	r6, #1
 8002420:	e7ee      	b.n	8002400 <__libc_init_array+0xc>
 8002422:	f855 3b04 	ldr.w	r3, [r5], #4
 8002426:	4798      	blx	r3
 8002428:	3601      	adds	r6, #1
 800242a:	e7f2      	b.n	8002412 <__libc_init_array+0x1e>
 800242c:	080029a4 	.word	0x080029a4
 8002430:	080029a4 	.word	0x080029a4
 8002434:	080029a4 	.word	0x080029a4
 8002438:	080029a8 	.word	0x080029a8

0800243c <__retarget_lock_init_recursive>:
 800243c:	4770      	bx	lr

0800243e <__retarget_lock_acquire_recursive>:
 800243e:	4770      	bx	lr

08002440 <__retarget_lock_release_recursive>:
 8002440:	4770      	bx	lr
	...

08002444 <_free_r>:
 8002444:	b538      	push	{r3, r4, r5, lr}
 8002446:	4605      	mov	r5, r0
 8002448:	2900      	cmp	r1, #0
 800244a:	d041      	beq.n	80024d0 <_free_r+0x8c>
 800244c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002450:	1f0c      	subs	r4, r1, #4
 8002452:	2b00      	cmp	r3, #0
 8002454:	bfb8      	it	lt
 8002456:	18e4      	addlt	r4, r4, r3
 8002458:	f000 f8e0 	bl	800261c <__malloc_lock>
 800245c:	4a1d      	ldr	r2, [pc, #116]	@ (80024d4 <_free_r+0x90>)
 800245e:	6813      	ldr	r3, [r2, #0]
 8002460:	b933      	cbnz	r3, 8002470 <_free_r+0x2c>
 8002462:	6063      	str	r3, [r4, #4]
 8002464:	6014      	str	r4, [r2, #0]
 8002466:	4628      	mov	r0, r5
 8002468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800246c:	f000 b8dc 	b.w	8002628 <__malloc_unlock>
 8002470:	42a3      	cmp	r3, r4
 8002472:	d908      	bls.n	8002486 <_free_r+0x42>
 8002474:	6820      	ldr	r0, [r4, #0]
 8002476:	1821      	adds	r1, r4, r0
 8002478:	428b      	cmp	r3, r1
 800247a:	bf01      	itttt	eq
 800247c:	6819      	ldreq	r1, [r3, #0]
 800247e:	685b      	ldreq	r3, [r3, #4]
 8002480:	1809      	addeq	r1, r1, r0
 8002482:	6021      	streq	r1, [r4, #0]
 8002484:	e7ed      	b.n	8002462 <_free_r+0x1e>
 8002486:	461a      	mov	r2, r3
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	b10b      	cbz	r3, 8002490 <_free_r+0x4c>
 800248c:	42a3      	cmp	r3, r4
 800248e:	d9fa      	bls.n	8002486 <_free_r+0x42>
 8002490:	6811      	ldr	r1, [r2, #0]
 8002492:	1850      	adds	r0, r2, r1
 8002494:	42a0      	cmp	r0, r4
 8002496:	d10b      	bne.n	80024b0 <_free_r+0x6c>
 8002498:	6820      	ldr	r0, [r4, #0]
 800249a:	4401      	add	r1, r0
 800249c:	1850      	adds	r0, r2, r1
 800249e:	4283      	cmp	r3, r0
 80024a0:	6011      	str	r1, [r2, #0]
 80024a2:	d1e0      	bne.n	8002466 <_free_r+0x22>
 80024a4:	6818      	ldr	r0, [r3, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	6053      	str	r3, [r2, #4]
 80024aa:	4408      	add	r0, r1
 80024ac:	6010      	str	r0, [r2, #0]
 80024ae:	e7da      	b.n	8002466 <_free_r+0x22>
 80024b0:	d902      	bls.n	80024b8 <_free_r+0x74>
 80024b2:	230c      	movs	r3, #12
 80024b4:	602b      	str	r3, [r5, #0]
 80024b6:	e7d6      	b.n	8002466 <_free_r+0x22>
 80024b8:	6820      	ldr	r0, [r4, #0]
 80024ba:	1821      	adds	r1, r4, r0
 80024bc:	428b      	cmp	r3, r1
 80024be:	bf04      	itt	eq
 80024c0:	6819      	ldreq	r1, [r3, #0]
 80024c2:	685b      	ldreq	r3, [r3, #4]
 80024c4:	6063      	str	r3, [r4, #4]
 80024c6:	bf04      	itt	eq
 80024c8:	1809      	addeq	r1, r1, r0
 80024ca:	6021      	streq	r1, [r4, #0]
 80024cc:	6054      	str	r4, [r2, #4]
 80024ce:	e7ca      	b.n	8002466 <_free_r+0x22>
 80024d0:	bd38      	pop	{r3, r4, r5, pc}
 80024d2:	bf00      	nop
 80024d4:	200001d4 	.word	0x200001d4

080024d8 <sbrk_aligned>:
 80024d8:	b570      	push	{r4, r5, r6, lr}
 80024da:	4e0f      	ldr	r6, [pc, #60]	@ (8002518 <sbrk_aligned+0x40>)
 80024dc:	460c      	mov	r4, r1
 80024de:	6831      	ldr	r1, [r6, #0]
 80024e0:	4605      	mov	r5, r0
 80024e2:	b911      	cbnz	r1, 80024ea <sbrk_aligned+0x12>
 80024e4:	f000 f9d6 	bl	8002894 <_sbrk_r>
 80024e8:	6030      	str	r0, [r6, #0]
 80024ea:	4621      	mov	r1, r4
 80024ec:	4628      	mov	r0, r5
 80024ee:	f000 f9d1 	bl	8002894 <_sbrk_r>
 80024f2:	1c43      	adds	r3, r0, #1
 80024f4:	d103      	bne.n	80024fe <sbrk_aligned+0x26>
 80024f6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80024fa:	4620      	mov	r0, r4
 80024fc:	bd70      	pop	{r4, r5, r6, pc}
 80024fe:	1cc4      	adds	r4, r0, #3
 8002500:	f024 0403 	bic.w	r4, r4, #3
 8002504:	42a0      	cmp	r0, r4
 8002506:	d0f8      	beq.n	80024fa <sbrk_aligned+0x22>
 8002508:	1a21      	subs	r1, r4, r0
 800250a:	4628      	mov	r0, r5
 800250c:	f000 f9c2 	bl	8002894 <_sbrk_r>
 8002510:	3001      	adds	r0, #1
 8002512:	d1f2      	bne.n	80024fa <sbrk_aligned+0x22>
 8002514:	e7ef      	b.n	80024f6 <sbrk_aligned+0x1e>
 8002516:	bf00      	nop
 8002518:	200001d0 	.word	0x200001d0

0800251c <_malloc_r>:
 800251c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002520:	1ccd      	adds	r5, r1, #3
 8002522:	f025 0503 	bic.w	r5, r5, #3
 8002526:	3508      	adds	r5, #8
 8002528:	2d0c      	cmp	r5, #12
 800252a:	bf38      	it	cc
 800252c:	250c      	movcc	r5, #12
 800252e:	2d00      	cmp	r5, #0
 8002530:	4606      	mov	r6, r0
 8002532:	db01      	blt.n	8002538 <_malloc_r+0x1c>
 8002534:	42a9      	cmp	r1, r5
 8002536:	d904      	bls.n	8002542 <_malloc_r+0x26>
 8002538:	230c      	movs	r3, #12
 800253a:	6033      	str	r3, [r6, #0]
 800253c:	2000      	movs	r0, #0
 800253e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002542:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002618 <_malloc_r+0xfc>
 8002546:	f000 f869 	bl	800261c <__malloc_lock>
 800254a:	f8d8 3000 	ldr.w	r3, [r8]
 800254e:	461c      	mov	r4, r3
 8002550:	bb44      	cbnz	r4, 80025a4 <_malloc_r+0x88>
 8002552:	4629      	mov	r1, r5
 8002554:	4630      	mov	r0, r6
 8002556:	f7ff ffbf 	bl	80024d8 <sbrk_aligned>
 800255a:	1c43      	adds	r3, r0, #1
 800255c:	4604      	mov	r4, r0
 800255e:	d158      	bne.n	8002612 <_malloc_r+0xf6>
 8002560:	f8d8 4000 	ldr.w	r4, [r8]
 8002564:	4627      	mov	r7, r4
 8002566:	2f00      	cmp	r7, #0
 8002568:	d143      	bne.n	80025f2 <_malloc_r+0xd6>
 800256a:	2c00      	cmp	r4, #0
 800256c:	d04b      	beq.n	8002606 <_malloc_r+0xea>
 800256e:	6823      	ldr	r3, [r4, #0]
 8002570:	4639      	mov	r1, r7
 8002572:	4630      	mov	r0, r6
 8002574:	eb04 0903 	add.w	r9, r4, r3
 8002578:	f000 f98c 	bl	8002894 <_sbrk_r>
 800257c:	4581      	cmp	r9, r0
 800257e:	d142      	bne.n	8002606 <_malloc_r+0xea>
 8002580:	6821      	ldr	r1, [r4, #0]
 8002582:	1a6d      	subs	r5, r5, r1
 8002584:	4629      	mov	r1, r5
 8002586:	4630      	mov	r0, r6
 8002588:	f7ff ffa6 	bl	80024d8 <sbrk_aligned>
 800258c:	3001      	adds	r0, #1
 800258e:	d03a      	beq.n	8002606 <_malloc_r+0xea>
 8002590:	6823      	ldr	r3, [r4, #0]
 8002592:	442b      	add	r3, r5
 8002594:	6023      	str	r3, [r4, #0]
 8002596:	f8d8 3000 	ldr.w	r3, [r8]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	bb62      	cbnz	r2, 80025f8 <_malloc_r+0xdc>
 800259e:	f8c8 7000 	str.w	r7, [r8]
 80025a2:	e00f      	b.n	80025c4 <_malloc_r+0xa8>
 80025a4:	6822      	ldr	r2, [r4, #0]
 80025a6:	1b52      	subs	r2, r2, r5
 80025a8:	d420      	bmi.n	80025ec <_malloc_r+0xd0>
 80025aa:	2a0b      	cmp	r2, #11
 80025ac:	d917      	bls.n	80025de <_malloc_r+0xc2>
 80025ae:	1961      	adds	r1, r4, r5
 80025b0:	42a3      	cmp	r3, r4
 80025b2:	6025      	str	r5, [r4, #0]
 80025b4:	bf18      	it	ne
 80025b6:	6059      	strne	r1, [r3, #4]
 80025b8:	6863      	ldr	r3, [r4, #4]
 80025ba:	bf08      	it	eq
 80025bc:	f8c8 1000 	streq.w	r1, [r8]
 80025c0:	5162      	str	r2, [r4, r5]
 80025c2:	604b      	str	r3, [r1, #4]
 80025c4:	4630      	mov	r0, r6
 80025c6:	f000 f82f 	bl	8002628 <__malloc_unlock>
 80025ca:	f104 000b 	add.w	r0, r4, #11
 80025ce:	1d23      	adds	r3, r4, #4
 80025d0:	f020 0007 	bic.w	r0, r0, #7
 80025d4:	1ac2      	subs	r2, r0, r3
 80025d6:	bf1c      	itt	ne
 80025d8:	1a1b      	subne	r3, r3, r0
 80025da:	50a3      	strne	r3, [r4, r2]
 80025dc:	e7af      	b.n	800253e <_malloc_r+0x22>
 80025de:	6862      	ldr	r2, [r4, #4]
 80025e0:	42a3      	cmp	r3, r4
 80025e2:	bf0c      	ite	eq
 80025e4:	f8c8 2000 	streq.w	r2, [r8]
 80025e8:	605a      	strne	r2, [r3, #4]
 80025ea:	e7eb      	b.n	80025c4 <_malloc_r+0xa8>
 80025ec:	4623      	mov	r3, r4
 80025ee:	6864      	ldr	r4, [r4, #4]
 80025f0:	e7ae      	b.n	8002550 <_malloc_r+0x34>
 80025f2:	463c      	mov	r4, r7
 80025f4:	687f      	ldr	r7, [r7, #4]
 80025f6:	e7b6      	b.n	8002566 <_malloc_r+0x4a>
 80025f8:	461a      	mov	r2, r3
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	42a3      	cmp	r3, r4
 80025fe:	d1fb      	bne.n	80025f8 <_malloc_r+0xdc>
 8002600:	2300      	movs	r3, #0
 8002602:	6053      	str	r3, [r2, #4]
 8002604:	e7de      	b.n	80025c4 <_malloc_r+0xa8>
 8002606:	230c      	movs	r3, #12
 8002608:	6033      	str	r3, [r6, #0]
 800260a:	4630      	mov	r0, r6
 800260c:	f000 f80c 	bl	8002628 <__malloc_unlock>
 8002610:	e794      	b.n	800253c <_malloc_r+0x20>
 8002612:	6005      	str	r5, [r0, #0]
 8002614:	e7d6      	b.n	80025c4 <_malloc_r+0xa8>
 8002616:	bf00      	nop
 8002618:	200001d4 	.word	0x200001d4

0800261c <__malloc_lock>:
 800261c:	4801      	ldr	r0, [pc, #4]	@ (8002624 <__malloc_lock+0x8>)
 800261e:	f7ff bf0e 	b.w	800243e <__retarget_lock_acquire_recursive>
 8002622:	bf00      	nop
 8002624:	200001cc 	.word	0x200001cc

08002628 <__malloc_unlock>:
 8002628:	4801      	ldr	r0, [pc, #4]	@ (8002630 <__malloc_unlock+0x8>)
 800262a:	f7ff bf09 	b.w	8002440 <__retarget_lock_release_recursive>
 800262e:	bf00      	nop
 8002630:	200001cc 	.word	0x200001cc

08002634 <__sflush_r>:
 8002634:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800263c:	0716      	lsls	r6, r2, #28
 800263e:	4605      	mov	r5, r0
 8002640:	460c      	mov	r4, r1
 8002642:	d454      	bmi.n	80026ee <__sflush_r+0xba>
 8002644:	684b      	ldr	r3, [r1, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	dc02      	bgt.n	8002650 <__sflush_r+0x1c>
 800264a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800264c:	2b00      	cmp	r3, #0
 800264e:	dd48      	ble.n	80026e2 <__sflush_r+0xae>
 8002650:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002652:	2e00      	cmp	r6, #0
 8002654:	d045      	beq.n	80026e2 <__sflush_r+0xae>
 8002656:	2300      	movs	r3, #0
 8002658:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800265c:	682f      	ldr	r7, [r5, #0]
 800265e:	6a21      	ldr	r1, [r4, #32]
 8002660:	602b      	str	r3, [r5, #0]
 8002662:	d030      	beq.n	80026c6 <__sflush_r+0x92>
 8002664:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002666:	89a3      	ldrh	r3, [r4, #12]
 8002668:	0759      	lsls	r1, r3, #29
 800266a:	d505      	bpl.n	8002678 <__sflush_r+0x44>
 800266c:	6863      	ldr	r3, [r4, #4]
 800266e:	1ad2      	subs	r2, r2, r3
 8002670:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002672:	b10b      	cbz	r3, 8002678 <__sflush_r+0x44>
 8002674:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002676:	1ad2      	subs	r2, r2, r3
 8002678:	2300      	movs	r3, #0
 800267a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800267c:	6a21      	ldr	r1, [r4, #32]
 800267e:	4628      	mov	r0, r5
 8002680:	47b0      	blx	r6
 8002682:	1c43      	adds	r3, r0, #1
 8002684:	89a3      	ldrh	r3, [r4, #12]
 8002686:	d106      	bne.n	8002696 <__sflush_r+0x62>
 8002688:	6829      	ldr	r1, [r5, #0]
 800268a:	291d      	cmp	r1, #29
 800268c:	d82b      	bhi.n	80026e6 <__sflush_r+0xb2>
 800268e:	4a2a      	ldr	r2, [pc, #168]	@ (8002738 <__sflush_r+0x104>)
 8002690:	40ca      	lsrs	r2, r1
 8002692:	07d6      	lsls	r6, r2, #31
 8002694:	d527      	bpl.n	80026e6 <__sflush_r+0xb2>
 8002696:	2200      	movs	r2, #0
 8002698:	6062      	str	r2, [r4, #4]
 800269a:	04d9      	lsls	r1, r3, #19
 800269c:	6922      	ldr	r2, [r4, #16]
 800269e:	6022      	str	r2, [r4, #0]
 80026a0:	d504      	bpl.n	80026ac <__sflush_r+0x78>
 80026a2:	1c42      	adds	r2, r0, #1
 80026a4:	d101      	bne.n	80026aa <__sflush_r+0x76>
 80026a6:	682b      	ldr	r3, [r5, #0]
 80026a8:	b903      	cbnz	r3, 80026ac <__sflush_r+0x78>
 80026aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80026ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80026ae:	602f      	str	r7, [r5, #0]
 80026b0:	b1b9      	cbz	r1, 80026e2 <__sflush_r+0xae>
 80026b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80026b6:	4299      	cmp	r1, r3
 80026b8:	d002      	beq.n	80026c0 <__sflush_r+0x8c>
 80026ba:	4628      	mov	r0, r5
 80026bc:	f7ff fec2 	bl	8002444 <_free_r>
 80026c0:	2300      	movs	r3, #0
 80026c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80026c4:	e00d      	b.n	80026e2 <__sflush_r+0xae>
 80026c6:	2301      	movs	r3, #1
 80026c8:	4628      	mov	r0, r5
 80026ca:	47b0      	blx	r6
 80026cc:	4602      	mov	r2, r0
 80026ce:	1c50      	adds	r0, r2, #1
 80026d0:	d1c9      	bne.n	8002666 <__sflush_r+0x32>
 80026d2:	682b      	ldr	r3, [r5, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0c6      	beq.n	8002666 <__sflush_r+0x32>
 80026d8:	2b1d      	cmp	r3, #29
 80026da:	d001      	beq.n	80026e0 <__sflush_r+0xac>
 80026dc:	2b16      	cmp	r3, #22
 80026de:	d11e      	bne.n	800271e <__sflush_r+0xea>
 80026e0:	602f      	str	r7, [r5, #0]
 80026e2:	2000      	movs	r0, #0
 80026e4:	e022      	b.n	800272c <__sflush_r+0xf8>
 80026e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026ea:	b21b      	sxth	r3, r3
 80026ec:	e01b      	b.n	8002726 <__sflush_r+0xf2>
 80026ee:	690f      	ldr	r7, [r1, #16]
 80026f0:	2f00      	cmp	r7, #0
 80026f2:	d0f6      	beq.n	80026e2 <__sflush_r+0xae>
 80026f4:	0793      	lsls	r3, r2, #30
 80026f6:	680e      	ldr	r6, [r1, #0]
 80026f8:	bf08      	it	eq
 80026fa:	694b      	ldreq	r3, [r1, #20]
 80026fc:	600f      	str	r7, [r1, #0]
 80026fe:	bf18      	it	ne
 8002700:	2300      	movne	r3, #0
 8002702:	eba6 0807 	sub.w	r8, r6, r7
 8002706:	608b      	str	r3, [r1, #8]
 8002708:	f1b8 0f00 	cmp.w	r8, #0
 800270c:	dde9      	ble.n	80026e2 <__sflush_r+0xae>
 800270e:	6a21      	ldr	r1, [r4, #32]
 8002710:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002712:	4643      	mov	r3, r8
 8002714:	463a      	mov	r2, r7
 8002716:	4628      	mov	r0, r5
 8002718:	47b0      	blx	r6
 800271a:	2800      	cmp	r0, #0
 800271c:	dc08      	bgt.n	8002730 <__sflush_r+0xfc>
 800271e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002726:	81a3      	strh	r3, [r4, #12]
 8002728:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800272c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002730:	4407      	add	r7, r0
 8002732:	eba8 0800 	sub.w	r8, r8, r0
 8002736:	e7e7      	b.n	8002708 <__sflush_r+0xd4>
 8002738:	20400001 	.word	0x20400001

0800273c <_fflush_r>:
 800273c:	b538      	push	{r3, r4, r5, lr}
 800273e:	690b      	ldr	r3, [r1, #16]
 8002740:	4605      	mov	r5, r0
 8002742:	460c      	mov	r4, r1
 8002744:	b913      	cbnz	r3, 800274c <_fflush_r+0x10>
 8002746:	2500      	movs	r5, #0
 8002748:	4628      	mov	r0, r5
 800274a:	bd38      	pop	{r3, r4, r5, pc}
 800274c:	b118      	cbz	r0, 8002756 <_fflush_r+0x1a>
 800274e:	6a03      	ldr	r3, [r0, #32]
 8002750:	b90b      	cbnz	r3, 8002756 <_fflush_r+0x1a>
 8002752:	f7ff fc8f 	bl	8002074 <__sinit>
 8002756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f3      	beq.n	8002746 <_fflush_r+0xa>
 800275e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002760:	07d0      	lsls	r0, r2, #31
 8002762:	d404      	bmi.n	800276e <_fflush_r+0x32>
 8002764:	0599      	lsls	r1, r3, #22
 8002766:	d402      	bmi.n	800276e <_fflush_r+0x32>
 8002768:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800276a:	f7ff fe68 	bl	800243e <__retarget_lock_acquire_recursive>
 800276e:	4628      	mov	r0, r5
 8002770:	4621      	mov	r1, r4
 8002772:	f7ff ff5f 	bl	8002634 <__sflush_r>
 8002776:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002778:	07da      	lsls	r2, r3, #31
 800277a:	4605      	mov	r5, r0
 800277c:	d4e4      	bmi.n	8002748 <_fflush_r+0xc>
 800277e:	89a3      	ldrh	r3, [r4, #12]
 8002780:	059b      	lsls	r3, r3, #22
 8002782:	d4e1      	bmi.n	8002748 <_fflush_r+0xc>
 8002784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002786:	f7ff fe5b 	bl	8002440 <__retarget_lock_release_recursive>
 800278a:	e7dd      	b.n	8002748 <_fflush_r+0xc>

0800278c <__swhatbuf_r>:
 800278c:	b570      	push	{r4, r5, r6, lr}
 800278e:	460c      	mov	r4, r1
 8002790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002794:	2900      	cmp	r1, #0
 8002796:	b096      	sub	sp, #88	@ 0x58
 8002798:	4615      	mov	r5, r2
 800279a:	461e      	mov	r6, r3
 800279c:	da0d      	bge.n	80027ba <__swhatbuf_r+0x2e>
 800279e:	89a3      	ldrh	r3, [r4, #12]
 80027a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80027a4:	f04f 0100 	mov.w	r1, #0
 80027a8:	bf14      	ite	ne
 80027aa:	2340      	movne	r3, #64	@ 0x40
 80027ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80027b0:	2000      	movs	r0, #0
 80027b2:	6031      	str	r1, [r6, #0]
 80027b4:	602b      	str	r3, [r5, #0]
 80027b6:	b016      	add	sp, #88	@ 0x58
 80027b8:	bd70      	pop	{r4, r5, r6, pc}
 80027ba:	466a      	mov	r2, sp
 80027bc:	f000 f848 	bl	8002850 <_fstat_r>
 80027c0:	2800      	cmp	r0, #0
 80027c2:	dbec      	blt.n	800279e <__swhatbuf_r+0x12>
 80027c4:	9901      	ldr	r1, [sp, #4]
 80027c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80027ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80027ce:	4259      	negs	r1, r3
 80027d0:	4159      	adcs	r1, r3
 80027d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027d6:	e7eb      	b.n	80027b0 <__swhatbuf_r+0x24>

080027d8 <__smakebuf_r>:
 80027d8:	898b      	ldrh	r3, [r1, #12]
 80027da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80027dc:	079d      	lsls	r5, r3, #30
 80027de:	4606      	mov	r6, r0
 80027e0:	460c      	mov	r4, r1
 80027e2:	d507      	bpl.n	80027f4 <__smakebuf_r+0x1c>
 80027e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80027e8:	6023      	str	r3, [r4, #0]
 80027ea:	6123      	str	r3, [r4, #16]
 80027ec:	2301      	movs	r3, #1
 80027ee:	6163      	str	r3, [r4, #20]
 80027f0:	b003      	add	sp, #12
 80027f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027f4:	ab01      	add	r3, sp, #4
 80027f6:	466a      	mov	r2, sp
 80027f8:	f7ff ffc8 	bl	800278c <__swhatbuf_r>
 80027fc:	9f00      	ldr	r7, [sp, #0]
 80027fe:	4605      	mov	r5, r0
 8002800:	4639      	mov	r1, r7
 8002802:	4630      	mov	r0, r6
 8002804:	f7ff fe8a 	bl	800251c <_malloc_r>
 8002808:	b948      	cbnz	r0, 800281e <__smakebuf_r+0x46>
 800280a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800280e:	059a      	lsls	r2, r3, #22
 8002810:	d4ee      	bmi.n	80027f0 <__smakebuf_r+0x18>
 8002812:	f023 0303 	bic.w	r3, r3, #3
 8002816:	f043 0302 	orr.w	r3, r3, #2
 800281a:	81a3      	strh	r3, [r4, #12]
 800281c:	e7e2      	b.n	80027e4 <__smakebuf_r+0xc>
 800281e:	89a3      	ldrh	r3, [r4, #12]
 8002820:	6020      	str	r0, [r4, #0]
 8002822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002826:	81a3      	strh	r3, [r4, #12]
 8002828:	9b01      	ldr	r3, [sp, #4]
 800282a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800282e:	b15b      	cbz	r3, 8002848 <__smakebuf_r+0x70>
 8002830:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002834:	4630      	mov	r0, r6
 8002836:	f000 f81d 	bl	8002874 <_isatty_r>
 800283a:	b128      	cbz	r0, 8002848 <__smakebuf_r+0x70>
 800283c:	89a3      	ldrh	r3, [r4, #12]
 800283e:	f023 0303 	bic.w	r3, r3, #3
 8002842:	f043 0301 	orr.w	r3, r3, #1
 8002846:	81a3      	strh	r3, [r4, #12]
 8002848:	89a3      	ldrh	r3, [r4, #12]
 800284a:	431d      	orrs	r5, r3
 800284c:	81a5      	strh	r5, [r4, #12]
 800284e:	e7cf      	b.n	80027f0 <__smakebuf_r+0x18>

08002850 <_fstat_r>:
 8002850:	b538      	push	{r3, r4, r5, lr}
 8002852:	4d07      	ldr	r5, [pc, #28]	@ (8002870 <_fstat_r+0x20>)
 8002854:	2300      	movs	r3, #0
 8002856:	4604      	mov	r4, r0
 8002858:	4608      	mov	r0, r1
 800285a:	4611      	mov	r1, r2
 800285c:	602b      	str	r3, [r5, #0]
 800285e:	f7fe fb71 	bl	8000f44 <_fstat>
 8002862:	1c43      	adds	r3, r0, #1
 8002864:	d102      	bne.n	800286c <_fstat_r+0x1c>
 8002866:	682b      	ldr	r3, [r5, #0]
 8002868:	b103      	cbz	r3, 800286c <_fstat_r+0x1c>
 800286a:	6023      	str	r3, [r4, #0]
 800286c:	bd38      	pop	{r3, r4, r5, pc}
 800286e:	bf00      	nop
 8002870:	200001c8 	.word	0x200001c8

08002874 <_isatty_r>:
 8002874:	b538      	push	{r3, r4, r5, lr}
 8002876:	4d06      	ldr	r5, [pc, #24]	@ (8002890 <_isatty_r+0x1c>)
 8002878:	2300      	movs	r3, #0
 800287a:	4604      	mov	r4, r0
 800287c:	4608      	mov	r0, r1
 800287e:	602b      	str	r3, [r5, #0]
 8002880:	f7fe fb70 	bl	8000f64 <_isatty>
 8002884:	1c43      	adds	r3, r0, #1
 8002886:	d102      	bne.n	800288e <_isatty_r+0x1a>
 8002888:	682b      	ldr	r3, [r5, #0]
 800288a:	b103      	cbz	r3, 800288e <_isatty_r+0x1a>
 800288c:	6023      	str	r3, [r4, #0]
 800288e:	bd38      	pop	{r3, r4, r5, pc}
 8002890:	200001c8 	.word	0x200001c8

08002894 <_sbrk_r>:
 8002894:	b538      	push	{r3, r4, r5, lr}
 8002896:	4d06      	ldr	r5, [pc, #24]	@ (80028b0 <_sbrk_r+0x1c>)
 8002898:	2300      	movs	r3, #0
 800289a:	4604      	mov	r4, r0
 800289c:	4608      	mov	r0, r1
 800289e:	602b      	str	r3, [r5, #0]
 80028a0:	f7fe fb78 	bl	8000f94 <_sbrk>
 80028a4:	1c43      	adds	r3, r0, #1
 80028a6:	d102      	bne.n	80028ae <_sbrk_r+0x1a>
 80028a8:	682b      	ldr	r3, [r5, #0]
 80028aa:	b103      	cbz	r3, 80028ae <_sbrk_r+0x1a>
 80028ac:	6023      	str	r3, [r4, #0]
 80028ae:	bd38      	pop	{r3, r4, r5, pc}
 80028b0:	200001c8 	.word	0x200001c8

080028b4 <_init>:
 80028b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b6:	bf00      	nop
 80028b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ba:	bc08      	pop	{r3}
 80028bc:	469e      	mov	lr, r3
 80028be:	4770      	bx	lr

080028c0 <_fini>:
 80028c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c2:	bf00      	nop
 80028c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028c6:	bc08      	pop	{r3}
 80028c8:	469e      	mov	lr, r3
 80028ca:	4770      	bx	lr
